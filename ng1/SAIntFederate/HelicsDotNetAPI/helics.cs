//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public enum HelicsCoreTypes {
  HELICS_CORE_TYPE_DEFAULT = 0,
  HELICS_CORE_TYPE_ZMQ = 1,
  HELICS_CORE_TYPE_MPI = 2,
  HELICS_CORE_TYPE_TEST = 3,
  HELICS_CORE_TYPE_INTERPROCESS = 4,
  HELICS_CORE_TYPE_IPC = 5,
  HELICS_CORE_TYPE_TCP = 6,
  HELICS_CORE_TYPE_UDP = 7,
  HELICS_CORE_TYPE_ZMQ_SS = 10,
  HELICS_CORE_TYPE_NNG = 9,
  HELICS_CORE_TYPE_TCP_SS = 11,
  HELICS_CORE_TYPE_HTTP = 12,
  HELICS_CORE_TYPE_WEBSOCKET = 14,
  HELICS_CORE_TYPE_INPROC = 18,
  HELICS_CORE_TYPE_NULL = 66,
  HELICS_CORE_TYPE_EMPTY = 77
}

public enum HelicsDataTypes {
  HELICS_DATA_TYPE_UNKNOWN = -1,
  HELICS_DATA_TYPE_STRING = 0,
  HELICS_DATA_TYPE_DOUBLE = 1,
  HELICS_DATA_TYPE_INT = 2,
  HELICS_DATA_TYPE_COMPLEX = 3,
  HELICS_DATA_TYPE_VECTOR = 4,
  HELICS_DATA_TYPE_COMPLEX_VECTOR = 5,
  HELICS_DATA_TYPE_NAMED_POINT = 6,
  HELICS_DATA_TYPE_BOOLEAN = 7,
  HELICS_DATA_TYPE_TIME = 8,
  HELICS_DATA_TYPE_CHAR = 9,
  HELICS_DATA_TYPE_RAW = 25,
  HELICS_DATA_TYPE_JSON = 30,
  HELICS_DATA_TYPE_MULTI = 33,
  HELICS_DATA_TYPE_ANY = 25262
}

public enum HelicsFederateFlags {
  HELICS_FLAG_OBSERVER = 0,
  HELICS_FLAG_UNINTERRUPTIBLE = 1,
  HELICS_FLAG_INTERRUPTIBLE = 2,
  HELICS_FLAG_SOURCE_ONLY = 4,
  HELICS_FLAG_ONLY_TRANSMIT_ON_CHANGE = 6,
  HELICS_FLAG_ONLY_UPDATE_ON_CHANGE = 8,
  HELICS_FLAG_WAIT_FOR_CURRENT_TIME_UPDATE = 10,
  HELICS_FLAG_RESTRICTIVE_TIME_POLICY = 11,
  HELICS_FLAG_ROLLBACK = 12,
  HELICS_FLAG_FORWARD_COMPUTE = 14,
  HELICS_FLAG_REALTIME = 16,
  HELICS_FLAG_SINGLE_THREAD_FEDERATE = 27,
  HELICS_FLAG_MULTI_THREAD_CORE = 28,
  HELICS_FLAG_SINGLE_THREAD_CORE = 29,
  HELICS_FLAG_IGNORE_TIME_MISMATCH_WARNINGS = 67,
  HELICS_FLAG_STRICT_CONFIG_CHECKING = 75,
  HELICS_FLAG_USE_JSON_SERIALIZATION = 79,
  HELICS_FLAG_EVENT_TRIGGERED = 81,
  HELICS_FLAG_LOCAL_PROFILING_CAPTURE = 96,
  HELICS_FLAG_CALLBACK_FEDERATE = 103,
  HELICS_FLAG_AUTOMATED_TIME_REQUEST = 106
}

public enum HelicsCoreFlags {
  HELICS_FLAG_DELAY_INIT_ENTRY = 45,
  HELICS_FLAG_ENABLE_INIT_ENTRY = 47,
  HELICS_FLAG_IGNORE = 999
}

public enum HelicsFlags {
  HELICS_FLAG_SLOW_RESPONDING = 29,
  HELICS_FLAG_DEBUGGING = 31,
  HELICS_FLAG_TERMINATE_ON_ERROR = 72,
  HELICS_FLAG_FORCE_LOGGING_FLUSH = 88,
  HELICS_FLAG_DUMPLOG = 89,
  HELICS_FLAG_PROFILING = 93,
  HELICS_FLAG_PROFILING_MARKER = 95,
  HELICS_FLAG_ALLOW_REMOTE_CONTROL = 109,
  HELICS_FLAG_DISABLE_REMOTE_CONTROL = 110
}

public enum HelicsLogLevels {
  HELICS_LOG_LEVEL_DUMPLOG = -10,
  HELICS_LOG_LEVEL_NO_PRINT = -4,
  HELICS_LOG_LEVEL_ERROR = 0,
  HELICS_LOG_LEVEL_PROFILING = 2,
  HELICS_LOG_LEVEL_WARNING = 3,
  HELICS_LOG_LEVEL_SUMMARY = 6,
  HELICS_LOG_LEVEL_CONNECTIONS = 9,
  HELICS_LOG_LEVEL_INTERFACES = 12,
  HELICS_LOG_LEVEL_TIMING = 15,
  HELICS_LOG_LEVEL_DATA = 18,
  HELICS_LOG_LEVEL_DEBUG = 21,
  HELICS_LOG_LEVEL_TRACE = 24
}

public enum HelicsErrorTypes {
  HELICS_ERROR_FATAL = -404,
  HELICS_ERROR_EXTERNAL_TYPE = -203,
  HELICS_ERROR_OTHER = -101,
  HELICS_USER_EXCEPTION = -29,
  HELICS_ERROR_INSUFFICIENT_SPACE = -18,
  HELICS_ERROR_EXECUTION_FAILURE = -14,
  HELICS_ERROR_INVALID_FUNCTION_CALL = -10,
  HELICS_ERROR_INVALID_STATE_TRANSITION = -9,
  HELICS_WARNING = -8,
  HELICS_ERROR_SYSTEM_FAILURE = -6,
  HELICS_ERROR_DISCARD = -5,
  HELICS_ERROR_INVALID_ARGUMENT = -4,
  HELICS_ERROR_INVALID_OBJECT = -3,
  HELICS_ERROR_CONNECTION_FAILURE = -2,
  HELICS_ERROR_REGISTRATION_FAILURE = -1,
  HELICS_OK = 0,
  HELICS_ERROR_USER_ABORT = 130,
  HELICS_ERROR_TERMINATED = 143
}

public enum HelicsProperties {
  HELICS_PROPERTY_TIME_DELTA = 137,
  HELICS_PROPERTY_TIME_PERIOD = 140,
  HELICS_PROPERTY_TIME_OFFSET = 141,
  HELICS_PROPERTY_TIME_RT_LAG = 143,
  HELICS_PROPERTY_TIME_RT_LEAD = 144,
  HELICS_PROPERTY_TIME_RT_TOLERANCE = 145,
  HELICS_PROPERTY_TIME_INPUT_DELAY = 148,
  HELICS_PROPERTY_TIME_OUTPUT_DELAY = 150,
  HELICS_PROPERTY_TIME_STOPTIME = 152,
  HELICS_PROPERTY_TIME_GRANT_TIMEOUT = 161,
  HELICS_PROPERTY_INT_CURRENT_ITERATION = 258,
  HELICS_PROPERTY_INT_MAX_ITERATIONS = 259,
  HELICS_PROPERTY_INT_LOG_LEVEL = 271,
  HELICS_PROPERTY_INT_FILE_LOG_LEVEL = 272,
  HELICS_PROPERTY_INT_CONSOLE_LOG_LEVEL = 274,
  HELICS_PROPERTY_INT_LOG_BUFFER = 276,
  HELICS_PROPERTY_INT_INDEX_GROUP = 282
}

public enum HelicsMultiInputModes {
  HELICS_MULTI_INPUT_NO_OP = 0,
  HELICS_MULTI_INPUT_VECTORIZE_OPERATION = 1,
  HELICS_MULTI_INPUT_AND_OPERATION = 2,
  HELICS_MULTI_INPUT_OR_OPERATION = 3,
  HELICS_MULTI_INPUT_SUM_OPERATION = 4,
  HELICS_MULTI_INPUT_DIFF_OPERATION = 5,
  HELICS_MULTI_INPUT_MAX_OPERATION = 6,
  HELICS_MULTI_INPUT_MIN_OPERATION = 7,
  HELICS_MULTI_INPUT_AVERAGE_OPERATION = 8
}

public enum HelicsHandleOptions {
  HELICS_HANDLE_OPTION_CONNECTION_REQUIRED = 397,
  HELICS_HANDLE_OPTION_CONNECTION_OPTIONAL = 402,
  HELICS_HANDLE_OPTION_SINGLE_CONNECTION_ONLY = 407,
  HELICS_HANDLE_OPTION_MULTIPLE_CONNECTIONS_ALLOWED = 409,
  HELICS_HANDLE_OPTION_BUFFER_DATA = 411,
  HELICS_HANDLE_OPTION_STRICT_TYPE_CHECKING = 414,
  HELICS_HANDLE_OPTION_IGNORE_UNIT_MISMATCH = 447,
  HELICS_HANDLE_OPTION_ONLY_TRANSMIT_ON_CHANGE = 452,
  HELICS_HANDLE_OPTION_ONLY_UPDATE_ON_CHANGE = 454,
  HELICS_HANDLE_OPTION_IGNORE_INTERRUPTS = 475,
  HELICS_HANDLE_OPTION_MULTI_INPUT_HANDLING_METHOD = 507,
  HELICS_HANDLE_OPTION_INPUT_PRIORITY_LOCATION = 510,
  HELICS_HANDLE_OPTION_CLEAR_PRIORITY_LIST = 512,
  HELICS_HANDLE_OPTION_CONNECTIONS = 522,
  HELICS_HANDLE_OPTION_TIME_RESTRICTED = 557
}

public enum HelicsFilterTypes {
  HELICS_FILTER_TYPE_CUSTOM = 0,
  HELICS_FILTER_TYPE_DELAY = 1,
  HELICS_FILTER_TYPE_RANDOM_DELAY = 2,
  HELICS_FILTER_TYPE_RANDOM_DROP = 3,
  HELICS_FILTER_TYPE_REROUTE = 4,
  HELICS_FILTER_TYPE_CLONE = 5,
  HELICS_FILTER_TYPE_FIREWALL = 6
}

public enum HelicsTranslatorTypes {
  HELICS_TRANSLATOR_TYPE_CUSTOM = 0,
  HELICS_TRANSLATOR_TYPE_JSON = 11,
  HELICS_TRANSLATOR_TYPE_BINARY = 12
}

public enum HelicsSequencingModes {
  HELICS_SEQUENCING_MODE_FAST = 0,
  HELICS_SEQUENCING_MODE_ORDERED = 1,
  HELICS_SEQUENCING_MODE_DEFAULT = 2
}

public enum HelicsIterationRequest {
  HELICS_ITERATION_REQUEST_NO_ITERATION = 0,
  HELICS_ITERATION_REQUEST_FORCE_ITERATION = 1,
  HELICS_ITERATION_REQUEST_ITERATE_IF_NEEDED = 2,
  HELICS_ITERATION_REQUEST_HALT_OPERATIONS = 5,
  HELICS_ITERATION_REQUEST_ERROR = 7
}

public enum HelicsIterationResult {
  HELICS_ITERATION_RESULT_NEXT_STEP = 0,
  HELICS_ITERATION_RESULT_ERROR = 1,
  HELICS_ITERATION_RESULT_HALTED = 2,
  HELICS_ITERATION_RESULT_ITERATING = 3
}

public enum HelicsFederateState {
  HELICS_STATE_UNKNOWN = -1,
  HELICS_STATE_STARTUP = 0,
  HELICS_STATE_INITIALIZATION = 1,
  HELICS_STATE_EXECUTION = 2,
  HELICS_STATE_FINALIZE = 3,
  HELICS_STATE_ERROR = 4,
  HELICS_STATE_PENDING_INIT = 5,
  HELICS_STATE_PENDING_EXEC = 6,
  HELICS_STATE_PENDING_TIME = 7,
  HELICS_STATE_PENDING_ITERATIVE_TIME = 8,
  HELICS_STATE_PENDING_FINALIZE = 9,
  HELICS_STATE_FINISHED = 10
}

public class HelicsComplex : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal HelicsComplex(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(HelicsComplex obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~HelicsComplex() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          helicsPINVOKE.delete_HelicsComplex(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public double real {
    set {
      helicsPINVOKE.HelicsComplex_real_set(swigCPtr, value);
    } 
    get {
      double ret = helicsPINVOKE.HelicsComplex_real_get(swigCPtr);
      return ret;
    } 
  }

  public double imag {
    set {
      helicsPINVOKE.HelicsComplex_imag_set(swigCPtr, value);
    } 
    get {
      double ret = helicsPINVOKE.HelicsComplex_imag_get(swigCPtr);
      return ret;
    } 
  }

  public HelicsComplex() : this(helicsPINVOKE.new_HelicsComplex(), true) {
  }

}

class helicsPINVOKE {

  protected class SWIGExceptionHelper {

    public delegate void ExceptionDelegate(string message);
    public delegate void ExceptionArgumentDelegate(string message, string paramName);

    static ExceptionDelegate applicationDelegate = new ExceptionDelegate(SetPendingApplicationException);
    static ExceptionDelegate arithmeticDelegate = new ExceptionDelegate(SetPendingArithmeticException);
    static ExceptionDelegate divideByZeroDelegate = new ExceptionDelegate(SetPendingDivideByZeroException);
    static ExceptionDelegate indexOutOfRangeDelegate = new ExceptionDelegate(SetPendingIndexOutOfRangeException);
    static ExceptionDelegate invalidCastDelegate = new ExceptionDelegate(SetPendingInvalidCastException);
    static ExceptionDelegate invalidOperationDelegate = new ExceptionDelegate(SetPendingInvalidOperationException);
    static ExceptionDelegate ioDelegate = new ExceptionDelegate(SetPendingIOException);
    static ExceptionDelegate nullReferenceDelegate = new ExceptionDelegate(SetPendingNullReferenceException);
    static ExceptionDelegate outOfMemoryDelegate = new ExceptionDelegate(SetPendingOutOfMemoryException);
    static ExceptionDelegate overflowDelegate = new ExceptionDelegate(SetPendingOverflowException);
    static ExceptionDelegate systemDelegate = new ExceptionDelegate(SetPendingSystemException);

    static ExceptionArgumentDelegate argumentDelegate = new ExceptionArgumentDelegate(SetPendingArgumentException);
    static ExceptionArgumentDelegate argumentNullDelegate = new ExceptionArgumentDelegate(SetPendingArgumentNullException);
    static ExceptionArgumentDelegate argumentOutOfRangeDelegate = new ExceptionArgumentDelegate(SetPendingArgumentOutOfRangeException);

    [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="SWIGRegisterExceptionCallbacks_helics")]
    public static extern void SWIGRegisterExceptionCallbacks_helics(
                                ExceptionDelegate applicationDelegate,
                                ExceptionDelegate arithmeticDelegate,
                                ExceptionDelegate divideByZeroDelegate, 
                                ExceptionDelegate indexOutOfRangeDelegate, 
                                ExceptionDelegate invalidCastDelegate,
                                ExceptionDelegate invalidOperationDelegate,
                                ExceptionDelegate ioDelegate,
                                ExceptionDelegate nullReferenceDelegate,
                                ExceptionDelegate outOfMemoryDelegate, 
                                ExceptionDelegate overflowDelegate, 
                                ExceptionDelegate systemExceptionDelegate);

    [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="SWIGRegisterExceptionArgumentCallbacks_helics")]
    public static extern void SWIGRegisterExceptionCallbacksArgument_helics(
                                ExceptionArgumentDelegate argumentDelegate,
                                ExceptionArgumentDelegate argumentNullDelegate,
                                ExceptionArgumentDelegate argumentOutOfRangeDelegate);

    static void SetPendingApplicationException(string message) {
      SWIGPendingException.Set(new global::System.ApplicationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArithmeticException(string message) {
      SWIGPendingException.Set(new global::System.ArithmeticException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingDivideByZeroException(string message) {
      SWIGPendingException.Set(new global::System.DivideByZeroException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIndexOutOfRangeException(string message) {
      SWIGPendingException.Set(new global::System.IndexOutOfRangeException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidCastException(string message) {
      SWIGPendingException.Set(new global::System.InvalidCastException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidOperationException(string message) {
      SWIGPendingException.Set(new global::System.InvalidOperationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIOException(string message) {
      SWIGPendingException.Set(new global::System.IO.IOException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingNullReferenceException(string message) {
      SWIGPendingException.Set(new global::System.NullReferenceException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOutOfMemoryException(string message) {
      SWIGPendingException.Set(new global::System.OutOfMemoryException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOverflowException(string message) {
      SWIGPendingException.Set(new global::System.OverflowException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingSystemException(string message) {
      SWIGPendingException.Set(new global::System.SystemException(message, SWIGPendingException.Retrieve()));
    }

    static void SetPendingArgumentException(string message, string paramName) {
      SWIGPendingException.Set(new global::System.ArgumentException(message, paramName, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArgumentNullException(string message, string paramName) {
      global::System.Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new global::System.ArgumentNullException(paramName, message));
    }
    static void SetPendingArgumentOutOfRangeException(string message, string paramName) {
      global::System.Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new global::System.ArgumentOutOfRangeException(paramName, message));
    }

    static SWIGExceptionHelper() {
      SWIGRegisterExceptionCallbacks_helics(
                                applicationDelegate,
                                arithmeticDelegate,
                                divideByZeroDelegate,
                                indexOutOfRangeDelegate,
                                invalidCastDelegate,
                                invalidOperationDelegate,
                                ioDelegate,
                                nullReferenceDelegate,
                                outOfMemoryDelegate,
                                overflowDelegate,
                                systemDelegate);

      SWIGRegisterExceptionCallbacksArgument_helics(
                                argumentDelegate,
                                argumentNullDelegate,
                                argumentOutOfRangeDelegate);
    }
  }

  protected static SWIGExceptionHelper swigExceptionHelper = new SWIGExceptionHelper();

  public class SWIGPendingException {
    [global::System.ThreadStatic]
    private static global::System.Exception pendingException = null;
    private static int numExceptionsPending = 0;
    private static global::System.Object exceptionsLock = null;

    public static bool Pending {
      get {
        bool pending = false;
        if (numExceptionsPending > 0)
          if (pendingException != null)
            pending = true;
        return pending;
      } 
    }

    public static void Set(global::System.Exception e) {
      if (pendingException != null)
        throw new global::System.ApplicationException("FATAL: An earlier pending exception from unmanaged code was missed and thus not thrown (" + pendingException.ToString() + ")", e);
      pendingException = e;
      lock(exceptionsLock) {
        numExceptionsPending++;
      }
    }

    public static global::System.Exception Retrieve() {
      global::System.Exception e = null;
      if (numExceptionsPending > 0) {
        if (pendingException != null) {
          e = pendingException;
          pendingException = null;
          lock(exceptionsLock) {
            numExceptionsPending--;
          }
        }
      }
      return e;
    }

    static SWIGPendingException() {
      exceptionsLock = new global::System.Object();
    }
  }


  protected class SWIGStringHelper {

    public delegate string SWIGStringDelegate(string message);
    static SWIGStringDelegate stringDelegate = new SWIGStringDelegate(CreateString);

    [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="SWIGRegisterStringCallback_helics")]
    public static extern void SWIGRegisterStringCallback_helics(SWIGStringDelegate stringDelegate);

    static string CreateString(string cString) {
      return cString;
    }

    static SWIGStringHelper() {
      SWIGRegisterStringCallback_helics(stringDelegate);
    }
  }

  static protected SWIGStringHelper swigStringHelper = new SWIGStringHelper();


  static helicsPINVOKE() {
  }


  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_HELICS_INVALID_OPTION_INDEX_get")]
  public static extern int HELICS_INVALID_OPTION_INDEX_get();

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_HELICS_INVALID_PROPERTY_VALUE_get")]
  public static extern int HELICS_INVALID_PROPERTY_VALUE_get();

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_HELICS_BIG_NUMBER_get")]
  public static extern double HELICS_BIG_NUMBER_get();

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_cHelicsBigNumber_get")]
  public static extern double cHelicsBigNumber_get();

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_HELICS_TIME_ZERO_get")]
  public static extern double HELICS_TIME_ZERO_get();

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_HELICS_TIME_EPSILON_get")]
  public static extern double HELICS_TIME_EPSILON_get();

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_HELICS_TIME_INVALID_get")]
  public static extern double HELICS_TIME_INVALID_get();

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_HELICS_TIME_MAXTIME_get")]
  public static extern double HELICS_TIME_MAXTIME_get();

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_HELICS_TRUE_get")]
  public static extern int HELICS_TRUE_get();

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_HELICS_FALSE_get")]
  public static extern int HELICS_FALSE_get();

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_HelicsComplex_real_set")]
  public static extern void HelicsComplex_real_set(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_HelicsComplex_real_get")]
  public static extern double HelicsComplex_real_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_HelicsComplex_imag_set")]
  public static extern void HelicsComplex_imag_set(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_HelicsComplex_imag_get")]
  public static extern double HelicsComplex_imag_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_new_HelicsComplex")]
  public static extern global::System.IntPtr new_HelicsComplex();

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_delete_HelicsComplex")]
  public static extern void delete_HelicsComplex(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsCreateDataBuffer")]
  public static extern global::System.IntPtr helicsCreateDataBuffer(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsDataBufferIsValid")]
  public static extern int helicsDataBufferIsValid(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsWrapDataInBuffer")]
  public static extern global::System.IntPtr helicsWrapDataInBuffer(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsDataBufferFree")]
  public static extern void helicsDataBufferFree(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsDataBufferSize")]
  public static extern global::System.IntPtr helicsDataBufferSize(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsDataBufferCapacity")]
  public static extern global::System.IntPtr helicsDataBufferCapacity(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsDataBufferData")]
  public static extern global::System.IntPtr helicsDataBufferData(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsDataBufferReserve")]
  public static extern int helicsDataBufferReserve(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsDataBufferClone")]
  public static extern global::System.IntPtr helicsDataBufferClone(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsIntegerToBytes")]
  public static extern global::System.IntPtr helicsIntegerToBytes(long jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsDoubleToBytes")]
  public static extern global::System.IntPtr helicsDoubleToBytes(double jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsStringToBytes")]
  public static extern global::System.IntPtr helicsStringToBytes(string jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsRawStringToBytes")]
  public static extern global::System.IntPtr helicsRawStringToBytes(string jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsBooleanToBytes")]
  public static extern global::System.IntPtr helicsBooleanToBytes(int jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsCharToBytes")]
  public static extern global::System.IntPtr helicsCharToBytes(char jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsTimeToBytes")]
  public static extern global::System.IntPtr helicsTimeToBytes(double jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsComplexToBytes")]
  public static extern global::System.IntPtr helicsComplexToBytes(double jarg1, double jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsComplexObjectToBytes")]
  public static extern global::System.IntPtr helicsComplexObjectToBytes(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsVectorToBytes")]
  public static extern global::System.IntPtr helicsVectorToBytes(out double jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsNamedPointToBytes")]
  public static extern global::System.IntPtr helicsNamedPointToBytes(string jarg1, double jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsComplexVectorToBytes")]
  public static extern global::System.IntPtr helicsComplexVectorToBytes(out double jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsDataBufferType")]
  public static extern int helicsDataBufferType(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsDataBufferToInteger")]
  public static extern long helicsDataBufferToInteger(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsDataBufferToDouble")]
  public static extern double helicsDataBufferToDouble(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsDataBufferToBoolean")]
  public static extern int helicsDataBufferToBoolean(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsDataBufferToChar")]
  public static extern char helicsDataBufferToChar(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsDataBufferStringSize")]
  public static extern int helicsDataBufferStringSize(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsDataBufferToString")]
  public static extern void helicsDataBufferToString(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, int jarg3, out int jarg4);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsDataBufferToRawString")]
  public static extern void helicsDataBufferToRawString(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, int jarg3, out int jarg4);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsDataBufferToTime")]
  public static extern double helicsDataBufferToTime(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsDataBufferToComplexObject")]
  public static extern global::System.IntPtr helicsDataBufferToComplexObject(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsDataBufferToComplex")]
  public static extern void helicsDataBufferToComplex(global::System.Runtime.InteropServices.HandleRef jarg1, out double jarg2, out double jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsDataBufferVectorSize")]
  public static extern int helicsDataBufferVectorSize(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsDataBufferToVector")]
  public static extern void helicsDataBufferToVector(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, out int jarg4);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsDataBufferToComplexVector")]
  public static extern void helicsDataBufferToComplexVector(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, out int jarg4);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsDataBufferToNamedPoint")]
  public static extern void helicsDataBufferToNamedPoint(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, int jarg3, out int jarg4, out double jarg5);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsDataBufferConvertToType")]
  public static extern int helicsDataBufferConvertToType(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsGetVersion")]
  public static extern string helicsGetVersion();

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsGetBuildFlags")]
  public static extern string helicsGetBuildFlags();

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsGetCompilerVersion")]
  public static extern string helicsGetCompilerVersion();

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsGetSystemInfo")]
  public static extern string helicsGetSystemInfo();

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsLoadSignalHandler")]
  public static extern void helicsLoadSignalHandler();

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsLoadThreadedSignalHandler")]
  public static extern void helicsLoadThreadedSignalHandler();

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsClearSignalHandler")]
  public static extern void helicsClearSignalHandler();

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsLoadSignalHandlerCallbackNoExit")]
  public static extern void helicsLoadSignalHandlerCallbackNoExit(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsAbort")]
  public static extern void helicsAbort(int jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsIsCoreTypeAvailable")]
  public static extern int helicsIsCoreTypeAvailable(string jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsCreateCore")]
  public static extern global::System.IntPtr helicsCreateCore(string jarg1, string jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsCreateCoreFromArgs")]
  public static extern global::System.IntPtr helicsCreateCoreFromArgs(string jarg1, string jarg2, int jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsCoreClone")]
  public static extern global::System.IntPtr helicsCoreClone(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsCoreIsValid")]
  public static extern int helicsCoreIsValid(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsCreateBroker")]
  public static extern global::System.IntPtr helicsCreateBroker(string jarg1, string jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsCreateBrokerFromArgs")]
  public static extern global::System.IntPtr helicsCreateBrokerFromArgs(string jarg1, string jarg2, int jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsBrokerClone")]
  public static extern global::System.IntPtr helicsBrokerClone(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsBrokerIsValid")]
  public static extern int helicsBrokerIsValid(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsBrokerIsConnected")]
  public static extern int helicsBrokerIsConnected(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsBrokerDataLink")]
  public static extern void helicsBrokerDataLink(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsBrokerAddSourceFilterToEndpoint")]
  public static extern void helicsBrokerAddSourceFilterToEndpoint(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsBrokerAddDestinationFilterToEndpoint")]
  public static extern void helicsBrokerAddDestinationFilterToEndpoint(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsBrokerMakeConnections")]
  public static extern void helicsBrokerMakeConnections(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsCoreWaitForDisconnect")]
  public static extern int helicsCoreWaitForDisconnect(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsBrokerWaitForDisconnect")]
  public static extern int helicsBrokerWaitForDisconnect(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsCoreIsConnected")]
  public static extern int helicsCoreIsConnected(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsCoreDataLink")]
  public static extern void helicsCoreDataLink(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsCoreAddSourceFilterToEndpoint")]
  public static extern void helicsCoreAddSourceFilterToEndpoint(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsCoreAddDestinationFilterToEndpoint")]
  public static extern void helicsCoreAddDestinationFilterToEndpoint(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsCoreMakeConnections")]
  public static extern void helicsCoreMakeConnections(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsBrokerGetIdentifier")]
  public static extern string helicsBrokerGetIdentifier(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsCoreGetIdentifier")]
  public static extern string helicsCoreGetIdentifier(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsBrokerGetAddress")]
  public static extern string helicsBrokerGetAddress(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsCoreGetAddress")]
  public static extern string helicsCoreGetAddress(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsCoreSetReadyToInit")]
  public static extern void helicsCoreSetReadyToInit(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsCoreConnect")]
  public static extern int helicsCoreConnect(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsCoreDisconnect")]
  public static extern void helicsCoreDisconnect(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsGetFederateByName")]
  public static extern global::System.IntPtr helicsGetFederateByName(string jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsBrokerDisconnect")]
  public static extern void helicsBrokerDisconnect(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateDestroy")]
  public static extern void helicsFederateDestroy(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsBrokerDestroy")]
  public static extern void helicsBrokerDestroy(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsCoreDestroy")]
  public static extern void helicsCoreDestroy(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsCoreFree")]
  public static extern void helicsCoreFree(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsBrokerFree")]
  public static extern void helicsBrokerFree(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsCreateValueFederate")]
  public static extern global::System.IntPtr helicsCreateValueFederate(string jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsCreateValueFederateFromConfig")]
  public static extern global::System.IntPtr helicsCreateValueFederateFromConfig(string jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsCreateMessageFederate")]
  public static extern global::System.IntPtr helicsCreateMessageFederate(string jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsCreateMessageFederateFromConfig")]
  public static extern global::System.IntPtr helicsCreateMessageFederateFromConfig(string jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsCreateCombinationFederate")]
  public static extern global::System.IntPtr helicsCreateCombinationFederate(string jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsCreateCombinationFederateFromConfig")]
  public static extern global::System.IntPtr helicsCreateCombinationFederateFromConfig(string jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsCreateCallbackFederate")]
  public static extern global::System.IntPtr helicsCreateCallbackFederate(string jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsCreateCallbackFederateFromConfig")]
  public static extern global::System.IntPtr helicsCreateCallbackFederateFromConfig(string jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateClone")]
  public static extern global::System.IntPtr helicsFederateClone(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateProtect")]
  public static extern void helicsFederateProtect(string jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateUnProtect")]
  public static extern void helicsFederateUnProtect(string jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateIsProtected")]
  public static extern int helicsFederateIsProtected(string jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsCreateFederateInfo")]
  public static extern global::System.IntPtr helicsCreateFederateInfo();

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateInfoClone")]
  public static extern global::System.IntPtr helicsFederateInfoClone(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateInfoLoadFromArgs")]
  public static extern void helicsFederateInfoLoadFromArgs(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateInfoLoadFromString")]
  public static extern void helicsFederateInfoLoadFromString(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateInfoFree")]
  public static extern void helicsFederateInfoFree(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateIsValid")]
  public static extern int helicsFederateIsValid(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateInfoSetCoreName")]
  public static extern void helicsFederateInfoSetCoreName(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateInfoSetCoreInitString")]
  public static extern void helicsFederateInfoSetCoreInitString(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateInfoSetBrokerInitString")]
  public static extern void helicsFederateInfoSetBrokerInitString(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateInfoSetCoreType")]
  public static extern void helicsFederateInfoSetCoreType(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateInfoSetCoreTypeFromString")]
  public static extern void helicsFederateInfoSetCoreTypeFromString(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateInfoSetBroker")]
  public static extern void helicsFederateInfoSetBroker(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateInfoSetBrokerKey")]
  public static extern void helicsFederateInfoSetBrokerKey(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateInfoSetBrokerPort")]
  public static extern void helicsFederateInfoSetBrokerPort(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateInfoSetLocalPort")]
  public static extern void helicsFederateInfoSetLocalPort(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsGetPropertyIndex")]
  public static extern int helicsGetPropertyIndex(string jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsGetFlagIndex")]
  public static extern int helicsGetFlagIndex(string jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsGetOptionIndex")]
  public static extern int helicsGetOptionIndex(string jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsGetOptionValue")]
  public static extern int helicsGetOptionValue(string jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsGetDataType")]
  public static extern int helicsGetDataType(string jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateInfoSetFlagOption")]
  public static extern void helicsFederateInfoSetFlagOption(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateInfoSetSeparator")]
  public static extern void helicsFederateInfoSetSeparator(global::System.Runtime.InteropServices.HandleRef jarg1, char jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateInfoSetTimeProperty")]
  public static extern void helicsFederateInfoSetTimeProperty(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, double jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateInfoSetIntegerProperty")]
  public static extern void helicsFederateInfoSetIntegerProperty(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateRegisterInterfaces")]
  public static extern void helicsFederateRegisterInterfaces(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateGlobalError")]
  public static extern void helicsFederateGlobalError(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateLocalError")]
  public static extern void helicsFederateLocalError(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateFinalize")]
  public static extern void helicsFederateFinalize(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateFinalizeAsync")]
  public static extern void helicsFederateFinalizeAsync(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateFinalizeComplete")]
  public static extern void helicsFederateFinalizeComplete(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateDisconnect")]
  public static extern void helicsFederateDisconnect(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateDisconnectAsync")]
  public static extern void helicsFederateDisconnectAsync(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateDisconnectComplete")]
  public static extern void helicsFederateDisconnectComplete(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateFree")]
  public static extern void helicsFederateFree(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsCloseLibrary")]
  public static extern void helicsCloseLibrary();

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateEnterInitializingMode")]
  public static extern void helicsFederateEnterInitializingMode(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateEnterInitializingModeAsync")]
  public static extern void helicsFederateEnterInitializingModeAsync(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateEnterInitializingModeComplete")]
  public static extern void helicsFederateEnterInitializingModeComplete(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateEnterInitializingModeIterative")]
  public static extern void helicsFederateEnterInitializingModeIterative(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateEnterInitializingModeIterativeAsync")]
  public static extern void helicsFederateEnterInitializingModeIterativeAsync(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateEnterInitializingModeIterativeComplete")]
  public static extern void helicsFederateEnterInitializingModeIterativeComplete(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateIsAsyncOperationCompleted")]
  public static extern int helicsFederateIsAsyncOperationCompleted(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateEnterExecutingMode")]
  public static extern void helicsFederateEnterExecutingMode(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateEnterExecutingModeAsync")]
  public static extern void helicsFederateEnterExecutingModeAsync(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateEnterExecutingModeComplete")]
  public static extern void helicsFederateEnterExecutingModeComplete(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateEnterExecutingModeIterative")]
  public static extern int helicsFederateEnterExecutingModeIterative(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateEnterExecutingModeIterativeAsync")]
  public static extern void helicsFederateEnterExecutingModeIterativeAsync(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateEnterExecutingModeIterativeComplete")]
  public static extern int helicsFederateEnterExecutingModeIterativeComplete(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateGetState")]
  public static extern int helicsFederateGetState(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateGetCore")]
  public static extern global::System.IntPtr helicsFederateGetCore(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateRequestTime")]
  public static extern double helicsFederateRequestTime(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateRequestTimeAdvance")]
  public static extern double helicsFederateRequestTimeAdvance(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateRequestNextStep")]
  public static extern double helicsFederateRequestNextStep(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateRequestTimeIterative")]
  public static extern double helicsFederateRequestTimeIterative(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2, int jarg3, out int jarg4);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateRequestTimeAsync")]
  public static extern void helicsFederateRequestTimeAsync(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateRequestTimeComplete")]
  public static extern double helicsFederateRequestTimeComplete(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateRequestTimeIterativeAsync")]
  public static extern void helicsFederateRequestTimeIterativeAsync(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateRequestTimeIterativeComplete")]
  public static extern double helicsFederateRequestTimeIterativeComplete(global::System.Runtime.InteropServices.HandleRef jarg1, out int jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateProcessCommunications")]
  public static extern void helicsFederateProcessCommunications(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateGetName")]
  public static extern string helicsFederateGetName(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateSetTimeProperty")]
  public static extern void helicsFederateSetTimeProperty(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, double jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateSetFlagOption")]
  public static extern void helicsFederateSetFlagOption(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateSetSeparator")]
  public static extern void helicsFederateSetSeparator(global::System.Runtime.InteropServices.HandleRef jarg1, char jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateSetIntegerProperty")]
  public static extern void helicsFederateSetIntegerProperty(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateGetTimeProperty")]
  public static extern double helicsFederateGetTimeProperty(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateGetFlagOption")]
  public static extern int helicsFederateGetFlagOption(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateGetIntegerProperty")]
  public static extern int helicsFederateGetIntegerProperty(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateGetCurrentTime")]
  public static extern double helicsFederateGetCurrentTime(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateAddAlias")]
  public static extern void helicsFederateAddAlias(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateSetGlobal")]
  public static extern void helicsFederateSetGlobal(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateSetTag")]
  public static extern void helicsFederateSetTag(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateGetTag")]
  public static extern string helicsFederateGetTag(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateAddDependency")]
  public static extern void helicsFederateAddDependency(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateSetLogFile")]
  public static extern void helicsFederateSetLogFile(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateLogErrorMessage")]
  public static extern void helicsFederateLogErrorMessage(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateLogWarningMessage")]
  public static extern void helicsFederateLogWarningMessage(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateLogInfoMessage")]
  public static extern void helicsFederateLogInfoMessage(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateLogDebugMessage")]
  public static extern void helicsFederateLogDebugMessage(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateLogLevelMessage")]
  public static extern void helicsFederateLogLevelMessage(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateSendCommand")]
  public static extern void helicsFederateSendCommand(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateGetCommand")]
  public static extern string helicsFederateGetCommand(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateGetCommandSource")]
  public static extern string helicsFederateGetCommandSource(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateWaitCommand")]
  public static extern string helicsFederateWaitCommand(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsCoreSetGlobal")]
  public static extern void helicsCoreSetGlobal(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsBrokerSetGlobal")]
  public static extern void helicsBrokerSetGlobal(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsCoreAddAlias")]
  public static extern void helicsCoreAddAlias(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsBrokerAddAlias")]
  public static extern void helicsBrokerAddAlias(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsCoreSendCommand")]
  public static extern void helicsCoreSendCommand(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsCoreSendOrderedCommand")]
  public static extern void helicsCoreSendOrderedCommand(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsBrokerSendCommand")]
  public static extern void helicsBrokerSendCommand(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsBrokerSendOrderedCommand")]
  public static extern void helicsBrokerSendOrderedCommand(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsCoreSetLogFile")]
  public static extern void helicsCoreSetLogFile(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsBrokerSetLogFile")]
  public static extern void helicsBrokerSetLogFile(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsBrokerSetTimeBarrier")]
  public static extern void helicsBrokerSetTimeBarrier(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsBrokerClearTimeBarrier")]
  public static extern void helicsBrokerClearTimeBarrier(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsBrokerGlobalError")]
  public static extern void helicsBrokerGlobalError(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsCoreGlobalError")]
  public static extern void helicsCoreGlobalError(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsCreateQuery")]
  public static extern global::System.IntPtr helicsCreateQuery(string jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsQueryExecute")]
  public static extern string helicsQueryExecute(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsQueryCoreExecute")]
  public static extern string helicsQueryCoreExecute(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsQueryBrokerExecute")]
  public static extern string helicsQueryBrokerExecute(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsQueryExecuteAsync")]
  public static extern void helicsQueryExecuteAsync(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsQueryExecuteComplete")]
  public static extern string helicsQueryExecuteComplete(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsQueryIsCompleted")]
  public static extern int helicsQueryIsCompleted(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsQuerySetTarget")]
  public static extern void helicsQuerySetTarget(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsQuerySetQueryString")]
  public static extern void helicsQuerySetQueryString(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsQuerySetOrdering")]
  public static extern void helicsQuerySetOrdering(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsQueryFree")]
  public static extern void helicsQueryFree(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsCleanupLibrary")]
  public static extern void helicsCleanupLibrary();

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateRegisterSubscription")]
  public static extern global::System.IntPtr helicsFederateRegisterSubscription(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateRegisterPublication")]
  public static extern global::System.IntPtr helicsFederateRegisterPublication(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, int jarg3, string jarg4);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateRegisterTypePublication")]
  public static extern global::System.IntPtr helicsFederateRegisterTypePublication(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3, string jarg4);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateRegisterGlobalPublication")]
  public static extern global::System.IntPtr helicsFederateRegisterGlobalPublication(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, int jarg3, string jarg4);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateRegisterGlobalTypePublication")]
  public static extern global::System.IntPtr helicsFederateRegisterGlobalTypePublication(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3, string jarg4);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateRegisterInput")]
  public static extern global::System.IntPtr helicsFederateRegisterInput(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, int jarg3, string jarg4);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateRegisterTypeInput")]
  public static extern global::System.IntPtr helicsFederateRegisterTypeInput(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3, string jarg4);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateRegisterGlobalInput")]
  public static extern global::System.IntPtr helicsFederateRegisterGlobalInput(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, int jarg3, string jarg4);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateRegisterGlobalTypeInput")]
  public static extern global::System.IntPtr helicsFederateRegisterGlobalTypeInput(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3, string jarg4);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateGetPublication")]
  public static extern global::System.IntPtr helicsFederateGetPublication(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateGetPublicationByIndex")]
  public static extern global::System.IntPtr helicsFederateGetPublicationByIndex(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateGetInput")]
  public static extern global::System.IntPtr helicsFederateGetInput(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateGetInputByIndex")]
  public static extern global::System.IntPtr helicsFederateGetInputByIndex(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateGetSubscription")]
  public static extern global::System.IntPtr helicsFederateGetSubscription(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateClearUpdates")]
  public static extern void helicsFederateClearUpdates(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateRegisterFromPublicationJSON")]
  public static extern void helicsFederateRegisterFromPublicationJSON(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederatePublishJSON")]
  public static extern void helicsFederatePublishJSON(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsPublicationIsValid")]
  public static extern int helicsPublicationIsValid(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsPublicationPublishBytes")]
  public static extern void helicsPublicationPublishBytes(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsPublicationPublishString")]
  public static extern void helicsPublicationPublishString(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsPublicationPublishInteger")]
  public static extern void helicsPublicationPublishInteger(global::System.Runtime.InteropServices.HandleRef jarg1, long jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsPublicationPublishBoolean")]
  public static extern void helicsPublicationPublishBoolean(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsPublicationPublishDouble")]
  public static extern void helicsPublicationPublishDouble(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsPublicationPublishTime")]
  public static extern void helicsPublicationPublishTime(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsPublicationPublishChar")]
  public static extern void helicsPublicationPublishChar(global::System.Runtime.InteropServices.HandleRef jarg1, char jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsPublicationPublishComplex")]
  public static extern void helicsPublicationPublishComplex(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2, double jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsPublicationPublishVector")]
  public static extern void helicsPublicationPublishVector(global::System.Runtime.InteropServices.HandleRef jarg1, out double jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsPublicationPublishComplexVector")]
  public static extern void helicsPublicationPublishComplexVector(global::System.Runtime.InteropServices.HandleRef jarg1, out double jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsPublicationPublishNamedPoint")]
  public static extern void helicsPublicationPublishNamedPoint(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, double jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsPublicationAddTarget")]
  public static extern void helicsPublicationAddTarget(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsInputIsValid")]
  public static extern int helicsInputIsValid(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsInputAddTarget")]
  public static extern void helicsInputAddTarget(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsInputGetByteCount")]
  public static extern int helicsInputGetByteCount(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsInputGetBytes")]
  public static extern void helicsInputGetBytes(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, out int jarg4);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsInputGetStringSize")]
  public static extern int helicsInputGetStringSize(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsInputGetString")]
  public static extern void helicsInputGetString(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, int jarg3, out int jarg4);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsInputGetInteger")]
  public static extern long helicsInputGetInteger(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsInputGetBoolean")]
  public static extern int helicsInputGetBoolean(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsInputGetDouble")]
  public static extern double helicsInputGetDouble(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsInputGetTime")]
  public static extern double helicsInputGetTime(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsInputGetChar")]
  public static extern char helicsInputGetChar(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsInputGetComplexObject")]
  public static extern global::System.IntPtr helicsInputGetComplexObject(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsInputGetComplex")]
  public static extern void helicsInputGetComplex(global::System.Runtime.InteropServices.HandleRef jarg1, out double jarg2, out double jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsInputGetVectorSize")]
  public static extern int helicsInputGetVectorSize(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsInputGetVector")]
  public static extern void helicsInputGetVector(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, out int jarg4);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsInputGetComplexVector")]
  public static extern void helicsInputGetComplexVector(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, out int jarg4);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsInputGetNamedPoint")]
  public static extern void helicsInputGetNamedPoint(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, int jarg3, out int jarg4, out double jarg5);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsInputSetDefaultBytes")]
  public static extern void helicsInputSetDefaultBytes(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsInputSetDefaultString")]
  public static extern void helicsInputSetDefaultString(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsInputSetDefaultInteger")]
  public static extern void helicsInputSetDefaultInteger(global::System.Runtime.InteropServices.HandleRef jarg1, long jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsInputSetDefaultBoolean")]
  public static extern void helicsInputSetDefaultBoolean(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsInputSetDefaultTime")]
  public static extern void helicsInputSetDefaultTime(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsInputSetDefaultChar")]
  public static extern void helicsInputSetDefaultChar(global::System.Runtime.InteropServices.HandleRef jarg1, char jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsInputSetDefaultDouble")]
  public static extern void helicsInputSetDefaultDouble(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsInputSetDefaultComplex")]
  public static extern void helicsInputSetDefaultComplex(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2, double jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsInputSetDefaultVector")]
  public static extern void helicsInputSetDefaultVector(global::System.Runtime.InteropServices.HandleRef jarg1, out double jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsInputSetDefaultComplexVector")]
  public static extern void helicsInputSetDefaultComplexVector(global::System.Runtime.InteropServices.HandleRef jarg1, out double jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsInputSetDefaultNamedPoint")]
  public static extern void helicsInputSetDefaultNamedPoint(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, double jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsInputGetType")]
  public static extern string helicsInputGetType(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsInputGetPublicationType")]
  public static extern string helicsInputGetPublicationType(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsInputGetPublicationDataType")]
  public static extern int helicsInputGetPublicationDataType(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsPublicationGetType")]
  public static extern string helicsPublicationGetType(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsInputGetName")]
  public static extern string helicsInputGetName(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsSubscriptionGetTarget")]
  public static extern string helicsSubscriptionGetTarget(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsPublicationGetName")]
  public static extern string helicsPublicationGetName(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsInputGetUnits")]
  public static extern string helicsInputGetUnits(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsInputGetInjectionUnits")]
  public static extern string helicsInputGetInjectionUnits(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsInputGetExtractionUnits")]
  public static extern string helicsInputGetExtractionUnits(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsPublicationGetUnits")]
  public static extern string helicsPublicationGetUnits(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsInputGetInfo")]
  public static extern string helicsInputGetInfo(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsInputSetInfo")]
  public static extern void helicsInputSetInfo(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsInputGetTag")]
  public static extern string helicsInputGetTag(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsInputSetTag")]
  public static extern void helicsInputSetTag(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsPublicationGetInfo")]
  public static extern string helicsPublicationGetInfo(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsPublicationSetInfo")]
  public static extern void helicsPublicationSetInfo(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsPublicationGetTag")]
  public static extern string helicsPublicationGetTag(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsPublicationSetTag")]
  public static extern void helicsPublicationSetTag(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsInputGetOption")]
  public static extern int helicsInputGetOption(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsInputSetOption")]
  public static extern void helicsInputSetOption(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsPublicationGetOption")]
  public static extern int helicsPublicationGetOption(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsPublicationSetOption")]
  public static extern void helicsPublicationSetOption(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsPublicationSetMinimumChange")]
  public static extern void helicsPublicationSetMinimumChange(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsInputSetMinimumChange")]
  public static extern void helicsInputSetMinimumChange(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsInputIsUpdated")]
  public static extern int helicsInputIsUpdated(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsInputLastUpdateTime")]
  public static extern double helicsInputLastUpdateTime(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsInputClearUpdate")]
  public static extern void helicsInputClearUpdate(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateGetPublicationCount")]
  public static extern int helicsFederateGetPublicationCount(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateGetInputCount")]
  public static extern int helicsFederateGetInputCount(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateRegisterEndpoint")]
  public static extern global::System.IntPtr helicsFederateRegisterEndpoint(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateRegisterGlobalEndpoint")]
  public static extern global::System.IntPtr helicsFederateRegisterGlobalEndpoint(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateRegisterTargetedEndpoint")]
  public static extern global::System.IntPtr helicsFederateRegisterTargetedEndpoint(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateRegisterGlobalTargetedEndpoint")]
  public static extern global::System.IntPtr helicsFederateRegisterGlobalTargetedEndpoint(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateGetEndpoint")]
  public static extern global::System.IntPtr helicsFederateGetEndpoint(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateGetEndpointByIndex")]
  public static extern global::System.IntPtr helicsFederateGetEndpointByIndex(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsEndpointIsValid")]
  public static extern int helicsEndpointIsValid(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsEndpointSetDefaultDestination")]
  public static extern void helicsEndpointSetDefaultDestination(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsEndpointGetDefaultDestination")]
  public static extern string helicsEndpointGetDefaultDestination(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsEndpointSendBytes")]
  public static extern void helicsEndpointSendBytes(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsEndpointSendBytesTo")]
  public static extern void helicsEndpointSendBytesTo(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, string jarg4);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsEndpointSendBytesToAt")]
  public static extern void helicsEndpointSendBytesToAt(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, string jarg4, double jarg5);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsEndpointSendBytesAt")]
  public static extern void helicsEndpointSendBytesAt(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, double jarg4);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsEndpointSendMessage")]
  public static extern void helicsEndpointSendMessage(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsEndpointSendMessageZeroCopy")]
  public static extern void helicsEndpointSendMessageZeroCopy(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsEndpointSubscribe")]
  public static extern void helicsEndpointSubscribe(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateHasMessage")]
  public static extern int helicsFederateHasMessage(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsEndpointHasMessage")]
  public static extern int helicsEndpointHasMessage(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederatePendingMessageCount")]
  public static extern int helicsFederatePendingMessageCount(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsEndpointPendingMessageCount")]
  public static extern int helicsEndpointPendingMessageCount(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsEndpointGetMessage")]
  public static extern global::System.IntPtr helicsEndpointGetMessage(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsEndpointCreateMessage")]
  public static extern global::System.IntPtr helicsEndpointCreateMessage(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsEndpointClearMessages")]
  public static extern void helicsEndpointClearMessages(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateGetMessage")]
  public static extern global::System.IntPtr helicsFederateGetMessage(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateCreateMessage")]
  public static extern global::System.IntPtr helicsFederateCreateMessage(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateClearMessages")]
  public static extern void helicsFederateClearMessages(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsEndpointGetType")]
  public static extern string helicsEndpointGetType(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsEndpointGetName")]
  public static extern string helicsEndpointGetName(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateGetEndpointCount")]
  public static extern int helicsFederateGetEndpointCount(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsEndpointGetInfo")]
  public static extern string helicsEndpointGetInfo(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsEndpointSetInfo")]
  public static extern void helicsEndpointSetInfo(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsEndpointGetTag")]
  public static extern string helicsEndpointGetTag(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsEndpointSetTag")]
  public static extern void helicsEndpointSetTag(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsEndpointSetOption")]
  public static extern void helicsEndpointSetOption(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsEndpointGetOption")]
  public static extern int helicsEndpointGetOption(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsEndpointAddSourceTarget")]
  public static extern void helicsEndpointAddSourceTarget(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsEndpointAddDestinationTarget")]
  public static extern void helicsEndpointAddDestinationTarget(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsEndpointRemoveTarget")]
  public static extern void helicsEndpointRemoveTarget(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsEndpointAddSourceFilter")]
  public static extern void helicsEndpointAddSourceFilter(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsEndpointAddDestinationFilter")]
  public static extern void helicsEndpointAddDestinationFilter(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsMessageGetSource")]
  public static extern string helicsMessageGetSource(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsMessageGetDestination")]
  public static extern string helicsMessageGetDestination(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsMessageGetOriginalSource")]
  public static extern string helicsMessageGetOriginalSource(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsMessageGetOriginalDestination")]
  public static extern string helicsMessageGetOriginalDestination(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsMessageGetTime")]
  public static extern double helicsMessageGetTime(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsMessageGetString")]
  public static extern string helicsMessageGetString(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsMessageGetMessageID")]
  public static extern int helicsMessageGetMessageID(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsMessageGetFlagOption")]
  public static extern int helicsMessageGetFlagOption(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsMessageGetByteCount")]
  public static extern int helicsMessageGetByteCount(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsMessageGetBytes")]
  public static extern void helicsMessageGetBytes(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, out int jarg4);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsMessageGetBytesPointer")]
  public static extern global::System.IntPtr helicsMessageGetBytesPointer(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsMessageIsValid")]
  public static extern int helicsMessageIsValid(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsMessageSetSource")]
  public static extern void helicsMessageSetSource(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsMessageSetDestination")]
  public static extern void helicsMessageSetDestination(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsMessageSetOriginalSource")]
  public static extern void helicsMessageSetOriginalSource(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsMessageSetOriginalDestination")]
  public static extern void helicsMessageSetOriginalDestination(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsMessageSetTime")]
  public static extern void helicsMessageSetTime(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsMessageReserve")]
  public static extern void helicsMessageReserve(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsMessageSetMessageID")]
  public static extern void helicsMessageSetMessageID(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsMessageClearFlags")]
  public static extern void helicsMessageClearFlags(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsMessageSetFlagOption")]
  public static extern void helicsMessageSetFlagOption(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsMessageSetString")]
  public static extern void helicsMessageSetString(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsMessageSetData")]
  public static extern void helicsMessageSetData(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsMessageAppendData")]
  public static extern void helicsMessageAppendData(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsMessageCopy")]
  public static extern void helicsMessageCopy(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsMessageClone")]
  public static extern global::System.IntPtr helicsMessageClone(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsMessageFree")]
  public static extern void helicsMessageFree(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsMessageClear")]
  public static extern void helicsMessageClear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateRegisterFilter")]
  public static extern global::System.IntPtr helicsFederateRegisterFilter(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateRegisterGlobalFilter")]
  public static extern global::System.IntPtr helicsFederateRegisterGlobalFilter(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateRegisterCloningFilter")]
  public static extern global::System.IntPtr helicsFederateRegisterCloningFilter(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateRegisterGlobalCloningFilter")]
  public static extern global::System.IntPtr helicsFederateRegisterGlobalCloningFilter(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsCoreRegisterFilter")]
  public static extern global::System.IntPtr helicsCoreRegisterFilter(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsCoreRegisterCloningFilter")]
  public static extern global::System.IntPtr helicsCoreRegisterCloningFilter(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateGetFilterCount")]
  public static extern int helicsFederateGetFilterCount(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateGetFilter")]
  public static extern global::System.IntPtr helicsFederateGetFilter(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateGetFilterByIndex")]
  public static extern global::System.IntPtr helicsFederateGetFilterByIndex(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFilterIsValid")]
  public static extern int helicsFilterIsValid(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFilterGetName")]
  public static extern string helicsFilterGetName(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFilterSet")]
  public static extern void helicsFilterSet(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, double jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFilterSetString")]
  public static extern void helicsFilterSetString(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFilterAddDestinationTarget")]
  public static extern void helicsFilterAddDestinationTarget(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFilterAddSourceTarget")]
  public static extern void helicsFilterAddSourceTarget(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFilterAddDeliveryEndpoint")]
  public static extern void helicsFilterAddDeliveryEndpoint(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFilterRemoveTarget")]
  public static extern void helicsFilterRemoveTarget(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFilterRemoveDeliveryEndpoint")]
  public static extern void helicsFilterRemoveDeliveryEndpoint(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFilterGetInfo")]
  public static extern string helicsFilterGetInfo(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFilterSetInfo")]
  public static extern void helicsFilterSetInfo(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFilterGetTag")]
  public static extern string helicsFilterGetTag(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFilterSetTag")]
  public static extern void helicsFilterSetTag(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFilterSetOption")]
  public static extern void helicsFilterSetOption(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFilterGetOption")]
  public static extern int helicsFilterGetOption(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateRegisterTranslator")]
  public static extern global::System.IntPtr helicsFederateRegisterTranslator(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateRegisterGlobalTranslator")]
  public static extern global::System.IntPtr helicsFederateRegisterGlobalTranslator(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsCoreRegisterTranslator")]
  public static extern global::System.IntPtr helicsCoreRegisterTranslator(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateGetTranslatorCount")]
  public static extern int helicsFederateGetTranslatorCount(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateGetTranslator")]
  public static extern global::System.IntPtr helicsFederateGetTranslator(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateGetTranslatorByIndex")]
  public static extern global::System.IntPtr helicsFederateGetTranslatorByIndex(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsTranslatorIsValid")]
  public static extern int helicsTranslatorIsValid(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsTranslatorGetName")]
  public static extern string helicsTranslatorGetName(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsTranslatorSet")]
  public static extern void helicsTranslatorSet(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, double jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsTranslatorSetString")]
  public static extern void helicsTranslatorSetString(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsTranslatorAddInputTarget")]
  public static extern void helicsTranslatorAddInputTarget(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsTranslatorAddPublicationTarget")]
  public static extern void helicsTranslatorAddPublicationTarget(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsTranslatorAddSourceEndpoint")]
  public static extern void helicsTranslatorAddSourceEndpoint(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsTranslatorAddDestinationEndpoint")]
  public static extern void helicsTranslatorAddDestinationEndpoint(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsTranslatorRemoveTarget")]
  public static extern void helicsTranslatorRemoveTarget(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsTranslatorGetInfo")]
  public static extern string helicsTranslatorGetInfo(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsTranslatorSetInfo")]
  public static extern void helicsTranslatorSetInfo(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsTranslatorGetTag")]
  public static extern string helicsTranslatorGetTag(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsTranslatorSetTag")]
  public static extern void helicsTranslatorSetTag(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsTranslatorSetOption")]
  public static extern void helicsTranslatorSetOption(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsTranslatorGetOption")]
  public static extern int helicsTranslatorGetOption(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateSetTimeRequestEntryCallback")]
  public static extern void helicsFederateSetTimeRequestEntryCallback(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateSetTimeUpdateCallback")]
  public static extern void helicsFederateSetTimeUpdateCallback(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateSetStateChangeCallback")]
  public static extern void helicsFederateSetStateChangeCallback(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateSetTimeRequestReturnCallback")]
  public static extern void helicsFederateSetTimeRequestReturnCallback(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateInitializingEntryCallback")]
  public static extern void helicsFederateInitializingEntryCallback(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateExecutingEntryCallback")]
  public static extern void helicsFederateExecutingEntryCallback(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateCosimulationTerminationCallback")]
  public static extern void helicsFederateCosimulationTerminationCallback(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsFederateErrorHandlerCallback")]
  public static extern void helicsFederateErrorHandlerCallback(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsCallbackFederateNextTimeCallback")]
  public static extern void helicsCallbackFederateNextTimeCallback(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsCallbackFederateNextTimeIterativeCallback")]
  public static extern void helicsCallbackFederateNextTimeIterativeCallback(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_helicsCallbackFederateInitializeCallback")]
  public static extern void helicsCallbackFederateInitializeCallback(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);
}

public class helics {
  public static int HELICS_INVALID_OPTION_INDEX {
    get {
      int ret = helicsPINVOKE.HELICS_INVALID_OPTION_INDEX_get();
      return ret;
    } 
  }

  public static int HELICS_INVALID_PROPERTY_VALUE {
    get {
      int ret = helicsPINVOKE.HELICS_INVALID_PROPERTY_VALUE_get();
      return ret;
    } 
  }

  public static double cHelicsBigNumber {
    get {
      double ret = helicsPINVOKE.cHelicsBigNumber_get();
      return ret;
    } 
  }

  public static double HELICS_TIME_ZERO {
    get {
      double ret = helicsPINVOKE.HELICS_TIME_ZERO_get();
      return ret;
    } 
  }

  public static double HELICS_TIME_EPSILON {
    get {
      double ret = helicsPINVOKE.HELICS_TIME_EPSILON_get();
      return ret;
    } 
  }

  public static double HELICS_TIME_INVALID {
    get {
      double ret = helicsPINVOKE.HELICS_TIME_INVALID_get();
      return ret;
    } 
  }

  public static double HELICS_TIME_MAXTIME {
    get {
      double ret = helicsPINVOKE.HELICS_TIME_MAXTIME_get();
      return ret;
    } 
  }

  public static int HELICS_TRUE {
    get {
      int ret = helicsPINVOKE.HELICS_TRUE_get();
      return ret;
    } 
  }

  public static int HELICS_FALSE {
    get {
      int ret = helicsPINVOKE.HELICS_FALSE_get();
      return ret;
    } 
  }

  public static SWIGTYPE_p_void helicsCreateDataBuffer(SWIGTYPE_p_int32_t initialCapacity) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsCreateDataBuffer(SWIGTYPE_p_int32_t.getCPtr(initialCapacity));
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int helicsDataBufferIsValid(SWIGTYPE_p_void data) {
    int ret = helicsPINVOKE.helicsDataBufferIsValid(SWIGTYPE_p_void.getCPtr(data));
    return ret;
  }

  public static SWIGTYPE_p_void helicsWrapDataInBuffer(SWIGTYPE_p_void data, int dataSize, int dataCapacity) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsWrapDataInBuffer(SWIGTYPE_p_void.getCPtr(data), dataSize, dataCapacity);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public static void helicsDataBufferFree(SWIGTYPE_p_void data) {
    helicsPINVOKE.helicsDataBufferFree(SWIGTYPE_p_void.getCPtr(data));
  }

  public static SWIGTYPE_p_int32_t helicsDataBufferSize(SWIGTYPE_p_void data) {
    SWIGTYPE_p_int32_t ret = new SWIGTYPE_p_int32_t(helicsPINVOKE.helicsDataBufferSize(SWIGTYPE_p_void.getCPtr(data)), true);
    return ret;
  }

  public static SWIGTYPE_p_int32_t helicsDataBufferCapacity(SWIGTYPE_p_void data) {
    SWIGTYPE_p_int32_t ret = new SWIGTYPE_p_int32_t(helicsPINVOKE.helicsDataBufferCapacity(SWIGTYPE_p_void.getCPtr(data)), true);
    return ret;
  }

  public static SWIGTYPE_p_void helicsDataBufferData(SWIGTYPE_p_void data) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsDataBufferData(SWIGTYPE_p_void.getCPtr(data));
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public static int helicsDataBufferReserve(SWIGTYPE_p_void data, SWIGTYPE_p_int32_t newCapacity) {
    int ret = helicsPINVOKE.helicsDataBufferReserve(SWIGTYPE_p_void.getCPtr(data), SWIGTYPE_p_int32_t.getCPtr(newCapacity));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void helicsDataBufferClone(SWIGTYPE_p_void data) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsDataBufferClone(SWIGTYPE_p_void.getCPtr(data));
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_int32_t helicsIntegerToBytes(long value, SWIGTYPE_p_void data) {
    SWIGTYPE_p_int32_t ret = new SWIGTYPE_p_int32_t(helicsPINVOKE.helicsIntegerToBytes(value, SWIGTYPE_p_void.getCPtr(data)), true);
    return ret;
  }

  public static SWIGTYPE_p_int32_t helicsDoubleToBytes(double value, SWIGTYPE_p_void data) {
    SWIGTYPE_p_int32_t ret = new SWIGTYPE_p_int32_t(helicsPINVOKE.helicsDoubleToBytes(value, SWIGTYPE_p_void.getCPtr(data)), true);
    return ret;
  }

  public static SWIGTYPE_p_int32_t helicsStringToBytes(string value, SWIGTYPE_p_void data) {
    SWIGTYPE_p_int32_t ret = new SWIGTYPE_p_int32_t(helicsPINVOKE.helicsStringToBytes(value, SWIGTYPE_p_void.getCPtr(data)), true);
    return ret;
  }

  public static SWIGTYPE_p_int32_t helicsRawStringToBytes(string str, int stringSize, SWIGTYPE_p_void data) {
    SWIGTYPE_p_int32_t ret = new SWIGTYPE_p_int32_t(helicsPINVOKE.helicsRawStringToBytes(str, stringSize, SWIGTYPE_p_void.getCPtr(data)), true);
    return ret;
  }

  public static SWIGTYPE_p_int32_t helicsBooleanToBytes(int value, SWIGTYPE_p_void data) {
    SWIGTYPE_p_int32_t ret = new SWIGTYPE_p_int32_t(helicsPINVOKE.helicsBooleanToBytes(value, SWIGTYPE_p_void.getCPtr(data)), true);
    return ret;
  }

  public static SWIGTYPE_p_int32_t helicsCharToBytes(char value, SWIGTYPE_p_void data) {
    SWIGTYPE_p_int32_t ret = new SWIGTYPE_p_int32_t(helicsPINVOKE.helicsCharToBytes(value, SWIGTYPE_p_void.getCPtr(data)), true);
    return ret;
  }

  public static SWIGTYPE_p_int32_t helicsTimeToBytes(double value, SWIGTYPE_p_void data) {
    SWIGTYPE_p_int32_t ret = new SWIGTYPE_p_int32_t(helicsPINVOKE.helicsTimeToBytes(value, SWIGTYPE_p_void.getCPtr(data)), true);
    return ret;
  }

  public static SWIGTYPE_p_int32_t helicsComplexToBytes(double real, double imag, SWIGTYPE_p_void data) {
    SWIGTYPE_p_int32_t ret = new SWIGTYPE_p_int32_t(helicsPINVOKE.helicsComplexToBytes(real, imag, SWIGTYPE_p_void.getCPtr(data)), true);
    return ret;
  }

  public static SWIGTYPE_p_int32_t helicsComplexObjectToBytes(HelicsComplex value, SWIGTYPE_p_void data) {
    SWIGTYPE_p_int32_t ret = new SWIGTYPE_p_int32_t(helicsPINVOKE.helicsComplexObjectToBytes(HelicsComplex.getCPtr(value), SWIGTYPE_p_void.getCPtr(data)), true);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_int32_t helicsVectorToBytes(out double value, int dataSize, SWIGTYPE_p_void data) {
    SWIGTYPE_p_int32_t ret = new SWIGTYPE_p_int32_t(helicsPINVOKE.helicsVectorToBytes(out value, dataSize, SWIGTYPE_p_void.getCPtr(data)), true);
    return ret;
  }

  public static SWIGTYPE_p_int32_t helicsNamedPointToBytes(string name, double value, SWIGTYPE_p_void data) {
    SWIGTYPE_p_int32_t ret = new SWIGTYPE_p_int32_t(helicsPINVOKE.helicsNamedPointToBytes(name, value, SWIGTYPE_p_void.getCPtr(data)), true);
    return ret;
  }

  public static SWIGTYPE_p_int32_t helicsComplexVectorToBytes(out double value, int dataSize, SWIGTYPE_p_void data) {
    SWIGTYPE_p_int32_t ret = new SWIGTYPE_p_int32_t(helicsPINVOKE.helicsComplexVectorToBytes(out value, dataSize, SWIGTYPE_p_void.getCPtr(data)), true);
    return ret;
  }

  public static int helicsDataBufferType(SWIGTYPE_p_void data) {
    int ret = helicsPINVOKE.helicsDataBufferType(SWIGTYPE_p_void.getCPtr(data));
    return ret;
  }

  public static long helicsDataBufferToInteger(SWIGTYPE_p_void data) {
    long ret = helicsPINVOKE.helicsDataBufferToInteger(SWIGTYPE_p_void.getCPtr(data));
    return ret;
  }

  public static double helicsDataBufferToDouble(SWIGTYPE_p_void data) {
    double ret = helicsPINVOKE.helicsDataBufferToDouble(SWIGTYPE_p_void.getCPtr(data));
    return ret;
  }

  public static int helicsDataBufferToBoolean(SWIGTYPE_p_void data) {
    int ret = helicsPINVOKE.helicsDataBufferToBoolean(SWIGTYPE_p_void.getCPtr(data));
    return ret;
  }

  public static char helicsDataBufferToChar(SWIGTYPE_p_void data) {
    char ret = helicsPINVOKE.helicsDataBufferToChar(SWIGTYPE_p_void.getCPtr(data));
    return ret;
  }

  public static int helicsDataBufferStringSize(SWIGTYPE_p_void data) {
    int ret = helicsPINVOKE.helicsDataBufferStringSize(SWIGTYPE_p_void.getCPtr(data));
    return ret;
  }

  public static void helicsDataBufferToString(SWIGTYPE_p_void data, string outputString, int maxStringLen, out int actualLength) {
    helicsPINVOKE.helicsDataBufferToString(SWIGTYPE_p_void.getCPtr(data), outputString, maxStringLen, out actualLength);
  }

  public static void helicsDataBufferToRawString(SWIGTYPE_p_void data, string outputString, int maxStringLen, out int actualLength) {
    helicsPINVOKE.helicsDataBufferToRawString(SWIGTYPE_p_void.getCPtr(data), outputString, maxStringLen, out actualLength);
  }

  public static double helicsDataBufferToTime(SWIGTYPE_p_void data) {
    double ret = helicsPINVOKE.helicsDataBufferToTime(SWIGTYPE_p_void.getCPtr(data));
    return ret;
  }

  public static HelicsComplex helicsDataBufferToComplexObject(SWIGTYPE_p_void data) {
    HelicsComplex ret = new HelicsComplex(helicsPINVOKE.helicsDataBufferToComplexObject(SWIGTYPE_p_void.getCPtr(data)), true);
    return ret;
  }

  public static void helicsDataBufferToComplex(SWIGTYPE_p_void data, out double real, out double imag) {
    helicsPINVOKE.helicsDataBufferToComplex(SWIGTYPE_p_void.getCPtr(data), out real, out imag);
  }

  public static int helicsDataBufferVectorSize(SWIGTYPE_p_void data) {
    int ret = helicsPINVOKE.helicsDataBufferVectorSize(SWIGTYPE_p_void.getCPtr(data));
    return ret;
  }

  public static void helicsDataBufferToVector(SWIGTYPE_p_void data, SWIGTYPE_p_double values, int maxlen, out int actualSize) {
    helicsPINVOKE.helicsDataBufferToVector(SWIGTYPE_p_void.getCPtr(data), SWIGTYPE_p_double.getCPtr(values), maxlen, out actualSize);
  }

  public static void helicsDataBufferToComplexVector(SWIGTYPE_p_void data, SWIGTYPE_p_double values, int maxlen, out int actualSize) {
    helicsPINVOKE.helicsDataBufferToComplexVector(SWIGTYPE_p_void.getCPtr(data), SWIGTYPE_p_double.getCPtr(values), maxlen, out actualSize);
  }

  public static void helicsDataBufferToNamedPoint(SWIGTYPE_p_void data, string outputString, int maxStringLength, out int actualLength, out double val) {
    helicsPINVOKE.helicsDataBufferToNamedPoint(SWIGTYPE_p_void.getCPtr(data), outputString, maxStringLength, out actualLength, out val);
  }

  public static int helicsDataBufferConvertToType(SWIGTYPE_p_void data, int newDataType) {
    int ret = helicsPINVOKE.helicsDataBufferConvertToType(SWIGTYPE_p_void.getCPtr(data), newDataType);
    return ret;
  }

  public static string helicsGetVersion() {
    string ret = helicsPINVOKE.helicsGetVersion();
    return ret;
  }

  public static string helicsGetBuildFlags() {
    string ret = helicsPINVOKE.helicsGetBuildFlags();
    return ret;
  }

  public static string helicsGetCompilerVersion() {
    string ret = helicsPINVOKE.helicsGetCompilerVersion();
    return ret;
  }

  public static string helicsGetSystemInfo() {
    string ret = helicsPINVOKE.helicsGetSystemInfo();
    return ret;
  }

  public static void helicsLoadSignalHandler() {
    helicsPINVOKE.helicsLoadSignalHandler();
  }

  public static void helicsLoadThreadedSignalHandler() {
    helicsPINVOKE.helicsLoadThreadedSignalHandler();
  }

  public static void helicsClearSignalHandler() {
    helicsPINVOKE.helicsClearSignalHandler();
  }

  public static void helicsLoadSignalHandlerCallbackNoExit(SWIGTYPE_p_f_int__int handler, int useSeparateThread) {
    helicsPINVOKE.helicsLoadSignalHandlerCallbackNoExit(SWIGTYPE_p_f_int__int.getCPtr(handler), useSeparateThread);
  }

  public static void helicsAbort(int errorCode, string errorString) {
    helicsPINVOKE.helicsAbort(errorCode, errorString);
  }

  public static int helicsIsCoreTypeAvailable(string type) {
    int ret = helicsPINVOKE.helicsIsCoreTypeAvailable(type);
    return ret;
  }

  public static SWIGTYPE_p_void helicsCreateCore(string type, string name, string initString) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsCreateCore(type, name, initString);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void helicsCreateCoreFromArgs(string type, string name, int argc, SWIGTYPE_p_p_char argv) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsCreateCoreFromArgs(type, name, argc, SWIGTYPE_p_p_char.getCPtr(argv));
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void helicsCoreClone(SWIGTYPE_p_void core) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsCoreClone(SWIGTYPE_p_void.getCPtr(core));
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int helicsCoreIsValid(SWIGTYPE_p_void core) {
    int ret = helicsPINVOKE.helicsCoreIsValid(SWIGTYPE_p_void.getCPtr(core));
    return ret;
  }

  public static SWIGTYPE_p_void helicsCreateBroker(string type, string name, string initString) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsCreateBroker(type, name, initString);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void helicsCreateBrokerFromArgs(string type, string name, int argc, SWIGTYPE_p_p_char argv) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsCreateBrokerFromArgs(type, name, argc, SWIGTYPE_p_p_char.getCPtr(argv));
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void helicsBrokerClone(SWIGTYPE_p_void broker) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsBrokerClone(SWIGTYPE_p_void.getCPtr(broker));
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int helicsBrokerIsValid(SWIGTYPE_p_void broker) {
    int ret = helicsPINVOKE.helicsBrokerIsValid(SWIGTYPE_p_void.getCPtr(broker));
    return ret;
  }

  public static int helicsBrokerIsConnected(SWIGTYPE_p_void broker) {
    int ret = helicsPINVOKE.helicsBrokerIsConnected(SWIGTYPE_p_void.getCPtr(broker));
    return ret;
  }

  public static void helicsBrokerDataLink(SWIGTYPE_p_void broker, string source, string target) {
    helicsPINVOKE.helicsBrokerDataLink(SWIGTYPE_p_void.getCPtr(broker), source, target);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsBrokerAddSourceFilterToEndpoint(SWIGTYPE_p_void broker, string filter, string endpoint) {
    helicsPINVOKE.helicsBrokerAddSourceFilterToEndpoint(SWIGTYPE_p_void.getCPtr(broker), filter, endpoint);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsBrokerAddDestinationFilterToEndpoint(SWIGTYPE_p_void broker, string filter, string endpoint) {
    helicsPINVOKE.helicsBrokerAddDestinationFilterToEndpoint(SWIGTYPE_p_void.getCPtr(broker), filter, endpoint);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsBrokerMakeConnections(SWIGTYPE_p_void broker, string file) {
    helicsPINVOKE.helicsBrokerMakeConnections(SWIGTYPE_p_void.getCPtr(broker), file);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int helicsCoreWaitForDisconnect(SWIGTYPE_p_void core, int msToWait) {
    int ret = helicsPINVOKE.helicsCoreWaitForDisconnect(SWIGTYPE_p_void.getCPtr(core), msToWait);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int helicsBrokerWaitForDisconnect(SWIGTYPE_p_void broker, int msToWait) {
    int ret = helicsPINVOKE.helicsBrokerWaitForDisconnect(SWIGTYPE_p_void.getCPtr(broker), msToWait);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int helicsCoreIsConnected(SWIGTYPE_p_void core) {
    int ret = helicsPINVOKE.helicsCoreIsConnected(SWIGTYPE_p_void.getCPtr(core));
    return ret;
  }

  public static void helicsCoreDataLink(SWIGTYPE_p_void core, string source, string target) {
    helicsPINVOKE.helicsCoreDataLink(SWIGTYPE_p_void.getCPtr(core), source, target);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsCoreAddSourceFilterToEndpoint(SWIGTYPE_p_void core, string filter, string endpoint) {
    helicsPINVOKE.helicsCoreAddSourceFilterToEndpoint(SWIGTYPE_p_void.getCPtr(core), filter, endpoint);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsCoreAddDestinationFilterToEndpoint(SWIGTYPE_p_void core, string filter, string endpoint) {
    helicsPINVOKE.helicsCoreAddDestinationFilterToEndpoint(SWIGTYPE_p_void.getCPtr(core), filter, endpoint);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsCoreMakeConnections(SWIGTYPE_p_void core, string file) {
    helicsPINVOKE.helicsCoreMakeConnections(SWIGTYPE_p_void.getCPtr(core), file);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static string helicsBrokerGetIdentifier(SWIGTYPE_p_void broker) {
    string ret = helicsPINVOKE.helicsBrokerGetIdentifier(SWIGTYPE_p_void.getCPtr(broker));
    return ret;
  }

  public static string helicsCoreGetIdentifier(SWIGTYPE_p_void core) {
    string ret = helicsPINVOKE.helicsCoreGetIdentifier(SWIGTYPE_p_void.getCPtr(core));
    return ret;
  }

  public static string helicsBrokerGetAddress(SWIGTYPE_p_void broker) {
    string ret = helicsPINVOKE.helicsBrokerGetAddress(SWIGTYPE_p_void.getCPtr(broker));
    return ret;
  }

  public static string helicsCoreGetAddress(SWIGTYPE_p_void core) {
    string ret = helicsPINVOKE.helicsCoreGetAddress(SWIGTYPE_p_void.getCPtr(core));
    return ret;
  }

  public static void helicsCoreSetReadyToInit(SWIGTYPE_p_void core) {
    helicsPINVOKE.helicsCoreSetReadyToInit(SWIGTYPE_p_void.getCPtr(core));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int helicsCoreConnect(SWIGTYPE_p_void core) {
    int ret = helicsPINVOKE.helicsCoreConnect(SWIGTYPE_p_void.getCPtr(core));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void helicsCoreDisconnect(SWIGTYPE_p_void core) {
    helicsPINVOKE.helicsCoreDisconnect(SWIGTYPE_p_void.getCPtr(core));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static SWIGTYPE_p_void helicsGetFederateByName(string fedName) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsGetFederateByName(fedName);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void helicsBrokerDisconnect(SWIGTYPE_p_void broker) {
    helicsPINVOKE.helicsBrokerDisconnect(SWIGTYPE_p_void.getCPtr(broker));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederateDestroy(SWIGTYPE_p_void fed) {
    helicsPINVOKE.helicsFederateDestroy(SWIGTYPE_p_void.getCPtr(fed));
  }

  public static void helicsBrokerDestroy(SWIGTYPE_p_void broker) {
    helicsPINVOKE.helicsBrokerDestroy(SWIGTYPE_p_void.getCPtr(broker));
  }

  public static void helicsCoreDestroy(SWIGTYPE_p_void core) {
    helicsPINVOKE.helicsCoreDestroy(SWIGTYPE_p_void.getCPtr(core));
  }

  public static void helicsCoreFree(SWIGTYPE_p_void core) {
    helicsPINVOKE.helicsCoreFree(SWIGTYPE_p_void.getCPtr(core));
  }

  public static void helicsBrokerFree(SWIGTYPE_p_void broker) {
    helicsPINVOKE.helicsBrokerFree(SWIGTYPE_p_void.getCPtr(broker));
  }

  public static SWIGTYPE_p_void helicsCreateValueFederate(string fedName, SWIGTYPE_p_void fi) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsCreateValueFederate(fedName, SWIGTYPE_p_void.getCPtr(fi));
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void helicsCreateValueFederateFromConfig(string configFile) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsCreateValueFederateFromConfig(configFile);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void helicsCreateMessageFederate(string fedName, SWIGTYPE_p_void fi) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsCreateMessageFederate(fedName, SWIGTYPE_p_void.getCPtr(fi));
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void helicsCreateMessageFederateFromConfig(string configFile) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsCreateMessageFederateFromConfig(configFile);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void helicsCreateCombinationFederate(string fedName, SWIGTYPE_p_void fi) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsCreateCombinationFederate(fedName, SWIGTYPE_p_void.getCPtr(fi));
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void helicsCreateCombinationFederateFromConfig(string configFile) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsCreateCombinationFederateFromConfig(configFile);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void helicsCreateCallbackFederate(string fedName, SWIGTYPE_p_void fi) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsCreateCallbackFederate(fedName, SWIGTYPE_p_void.getCPtr(fi));
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void helicsCreateCallbackFederateFromConfig(string configFile) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsCreateCallbackFederateFromConfig(configFile);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void helicsFederateClone(SWIGTYPE_p_void fed) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsFederateClone(SWIGTYPE_p_void.getCPtr(fed));
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void helicsFederateProtect(string fedName) {
    helicsPINVOKE.helicsFederateProtect(fedName);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederateUnProtect(string fedName) {
    helicsPINVOKE.helicsFederateUnProtect(fedName);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int helicsFederateIsProtected(string fedName) {
    int ret = helicsPINVOKE.helicsFederateIsProtected(fedName);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void helicsCreateFederateInfo() {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsCreateFederateInfo();
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_void helicsFederateInfoClone(SWIGTYPE_p_void fi) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsFederateInfoClone(SWIGTYPE_p_void.getCPtr(fi));
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void helicsFederateInfoLoadFromArgs(SWIGTYPE_p_void fi, int argc, SWIGTYPE_p_p_char argv) {
    helicsPINVOKE.helicsFederateInfoLoadFromArgs(SWIGTYPE_p_void.getCPtr(fi), argc, SWIGTYPE_p_p_char.getCPtr(argv));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederateInfoLoadFromString(SWIGTYPE_p_void fi, string args) {
    helicsPINVOKE.helicsFederateInfoLoadFromString(SWIGTYPE_p_void.getCPtr(fi), args);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederateInfoFree(SWIGTYPE_p_void fi) {
    helicsPINVOKE.helicsFederateInfoFree(SWIGTYPE_p_void.getCPtr(fi));
  }

  public static int helicsFederateIsValid(SWIGTYPE_p_void fed) {
    int ret = helicsPINVOKE.helicsFederateIsValid(SWIGTYPE_p_void.getCPtr(fed));
    return ret;
  }

  public static void helicsFederateInfoSetCoreName(SWIGTYPE_p_void fi, string corename) {
    helicsPINVOKE.helicsFederateInfoSetCoreName(SWIGTYPE_p_void.getCPtr(fi), corename);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederateInfoSetCoreInitString(SWIGTYPE_p_void fi, string coreInit) {
    helicsPINVOKE.helicsFederateInfoSetCoreInitString(SWIGTYPE_p_void.getCPtr(fi), coreInit);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederateInfoSetBrokerInitString(SWIGTYPE_p_void fi, string brokerInit) {
    helicsPINVOKE.helicsFederateInfoSetBrokerInitString(SWIGTYPE_p_void.getCPtr(fi), brokerInit);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederateInfoSetCoreType(SWIGTYPE_p_void fi, int coretype) {
    helicsPINVOKE.helicsFederateInfoSetCoreType(SWIGTYPE_p_void.getCPtr(fi), coretype);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederateInfoSetCoreTypeFromString(SWIGTYPE_p_void fi, string coretype) {
    helicsPINVOKE.helicsFederateInfoSetCoreTypeFromString(SWIGTYPE_p_void.getCPtr(fi), coretype);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederateInfoSetBroker(SWIGTYPE_p_void fi, string broker) {
    helicsPINVOKE.helicsFederateInfoSetBroker(SWIGTYPE_p_void.getCPtr(fi), broker);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederateInfoSetBrokerKey(SWIGTYPE_p_void fi, string brokerkey) {
    helicsPINVOKE.helicsFederateInfoSetBrokerKey(SWIGTYPE_p_void.getCPtr(fi), brokerkey);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederateInfoSetBrokerPort(SWIGTYPE_p_void fi, int brokerPort) {
    helicsPINVOKE.helicsFederateInfoSetBrokerPort(SWIGTYPE_p_void.getCPtr(fi), brokerPort);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederateInfoSetLocalPort(SWIGTYPE_p_void fi, string localPort) {
    helicsPINVOKE.helicsFederateInfoSetLocalPort(SWIGTYPE_p_void.getCPtr(fi), localPort);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int helicsGetPropertyIndex(string val) {
    int ret = helicsPINVOKE.helicsGetPropertyIndex(val);
    return ret;
  }

  public static int helicsGetFlagIndex(string val) {
    int ret = helicsPINVOKE.helicsGetFlagIndex(val);
    return ret;
  }

  public static int helicsGetOptionIndex(string val) {
    int ret = helicsPINVOKE.helicsGetOptionIndex(val);
    return ret;
  }

  public static int helicsGetOptionValue(string val) {
    int ret = helicsPINVOKE.helicsGetOptionValue(val);
    return ret;
  }

  public static int helicsGetDataType(string val) {
    int ret = helicsPINVOKE.helicsGetDataType(val);
    return ret;
  }

  public static void helicsFederateInfoSetFlagOption(SWIGTYPE_p_void fi, int flag, int value) {
    helicsPINVOKE.helicsFederateInfoSetFlagOption(SWIGTYPE_p_void.getCPtr(fi), flag, value);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederateInfoSetSeparator(SWIGTYPE_p_void fi, char separator) {
    helicsPINVOKE.helicsFederateInfoSetSeparator(SWIGTYPE_p_void.getCPtr(fi), separator);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederateInfoSetTimeProperty(SWIGTYPE_p_void fi, int timeProperty, double propertyValue) {
    helicsPINVOKE.helicsFederateInfoSetTimeProperty(SWIGTYPE_p_void.getCPtr(fi), timeProperty, propertyValue);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederateInfoSetIntegerProperty(SWIGTYPE_p_void fi, int intProperty, int propertyValue) {
    helicsPINVOKE.helicsFederateInfoSetIntegerProperty(SWIGTYPE_p_void.getCPtr(fi), intProperty, propertyValue);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederateRegisterInterfaces(SWIGTYPE_p_void fed, string file) {
    helicsPINVOKE.helicsFederateRegisterInterfaces(SWIGTYPE_p_void.getCPtr(fed), file);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederateGlobalError(SWIGTYPE_p_void fed, int errorCode, string errorString) {
    helicsPINVOKE.helicsFederateGlobalError(SWIGTYPE_p_void.getCPtr(fed), errorCode, errorString);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederateLocalError(SWIGTYPE_p_void fed, int errorCode, string errorString) {
    helicsPINVOKE.helicsFederateLocalError(SWIGTYPE_p_void.getCPtr(fed), errorCode, errorString);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederateFinalize(SWIGTYPE_p_void fed) {
    helicsPINVOKE.helicsFederateFinalize(SWIGTYPE_p_void.getCPtr(fed));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederateFinalizeAsync(SWIGTYPE_p_void fed) {
    helicsPINVOKE.helicsFederateFinalizeAsync(SWIGTYPE_p_void.getCPtr(fed));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederateFinalizeComplete(SWIGTYPE_p_void fed) {
    helicsPINVOKE.helicsFederateFinalizeComplete(SWIGTYPE_p_void.getCPtr(fed));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederateDisconnect(SWIGTYPE_p_void fed) {
    helicsPINVOKE.helicsFederateDisconnect(SWIGTYPE_p_void.getCPtr(fed));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederateDisconnectAsync(SWIGTYPE_p_void fed) {
    helicsPINVOKE.helicsFederateDisconnectAsync(SWIGTYPE_p_void.getCPtr(fed));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederateDisconnectComplete(SWIGTYPE_p_void fed) {
    helicsPINVOKE.helicsFederateDisconnectComplete(SWIGTYPE_p_void.getCPtr(fed));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederateFree(SWIGTYPE_p_void fed) {
    helicsPINVOKE.helicsFederateFree(SWIGTYPE_p_void.getCPtr(fed));
  }

  public static void helicsCloseLibrary() {
    helicsPINVOKE.helicsCloseLibrary();
  }

  public static void helicsFederateEnterInitializingMode(SWIGTYPE_p_void fed) {
    helicsPINVOKE.helicsFederateEnterInitializingMode(SWIGTYPE_p_void.getCPtr(fed));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederateEnterInitializingModeAsync(SWIGTYPE_p_void fed) {
    helicsPINVOKE.helicsFederateEnterInitializingModeAsync(SWIGTYPE_p_void.getCPtr(fed));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederateEnterInitializingModeComplete(SWIGTYPE_p_void fed) {
    helicsPINVOKE.helicsFederateEnterInitializingModeComplete(SWIGTYPE_p_void.getCPtr(fed));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederateEnterInitializingModeIterative(SWIGTYPE_p_void fed) {
    helicsPINVOKE.helicsFederateEnterInitializingModeIterative(SWIGTYPE_p_void.getCPtr(fed));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederateEnterInitializingModeIterativeAsync(SWIGTYPE_p_void fed) {
    helicsPINVOKE.helicsFederateEnterInitializingModeIterativeAsync(SWIGTYPE_p_void.getCPtr(fed));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederateEnterInitializingModeIterativeComplete(SWIGTYPE_p_void fed) {
    helicsPINVOKE.helicsFederateEnterInitializingModeIterativeComplete(SWIGTYPE_p_void.getCPtr(fed));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int helicsFederateIsAsyncOperationCompleted(SWIGTYPE_p_void fed) {
    int ret = helicsPINVOKE.helicsFederateIsAsyncOperationCompleted(SWIGTYPE_p_void.getCPtr(fed));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void helicsFederateEnterExecutingMode(SWIGTYPE_p_void fed) {
    helicsPINVOKE.helicsFederateEnterExecutingMode(SWIGTYPE_p_void.getCPtr(fed));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederateEnterExecutingModeAsync(SWIGTYPE_p_void fed) {
    helicsPINVOKE.helicsFederateEnterExecutingModeAsync(SWIGTYPE_p_void.getCPtr(fed));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederateEnterExecutingModeComplete(SWIGTYPE_p_void fed) {
    helicsPINVOKE.helicsFederateEnterExecutingModeComplete(SWIGTYPE_p_void.getCPtr(fed));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static HelicsIterationResult helicsFederateEnterExecutingModeIterative(SWIGTYPE_p_void fed, HelicsIterationRequest iterate) {
    HelicsIterationResult ret = (HelicsIterationResult)helicsPINVOKE.helicsFederateEnterExecutingModeIterative(SWIGTYPE_p_void.getCPtr(fed), (int)iterate);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void helicsFederateEnterExecutingModeIterativeAsync(SWIGTYPE_p_void fed, HelicsIterationRequest iterate) {
    helicsPINVOKE.helicsFederateEnterExecutingModeIterativeAsync(SWIGTYPE_p_void.getCPtr(fed), (int)iterate);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static HelicsIterationResult helicsFederateEnterExecutingModeIterativeComplete(SWIGTYPE_p_void fed) {
    HelicsIterationResult ret = (HelicsIterationResult)helicsPINVOKE.helicsFederateEnterExecutingModeIterativeComplete(SWIGTYPE_p_void.getCPtr(fed));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static HelicsFederateState helicsFederateGetState(SWIGTYPE_p_void fed) {
    HelicsFederateState ret = (HelicsFederateState)helicsPINVOKE.helicsFederateGetState(SWIGTYPE_p_void.getCPtr(fed));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void helicsFederateGetCore(SWIGTYPE_p_void fed) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsFederateGetCore(SWIGTYPE_p_void.getCPtr(fed));
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double helicsFederateRequestTime(SWIGTYPE_p_void fed, double requestTime) {
    double ret = helicsPINVOKE.helicsFederateRequestTime(SWIGTYPE_p_void.getCPtr(fed), requestTime);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double helicsFederateRequestTimeAdvance(SWIGTYPE_p_void fed, double timeDelta) {
    double ret = helicsPINVOKE.helicsFederateRequestTimeAdvance(SWIGTYPE_p_void.getCPtr(fed), timeDelta);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double helicsFederateRequestNextStep(SWIGTYPE_p_void fed) {
    double ret = helicsPINVOKE.helicsFederateRequestNextStep(SWIGTYPE_p_void.getCPtr(fed));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double helicsFederateRequestTimeIterative(SWIGTYPE_p_void fed, double requestTime, HelicsIterationRequest iterate, out int outIteration) {
    double ret = helicsPINVOKE.helicsFederateRequestTimeIterative(SWIGTYPE_p_void.getCPtr(fed), requestTime, (int)iterate, out outIteration);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void helicsFederateRequestTimeAsync(SWIGTYPE_p_void fed, double requestTime) {
    helicsPINVOKE.helicsFederateRequestTimeAsync(SWIGTYPE_p_void.getCPtr(fed), requestTime);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static double helicsFederateRequestTimeComplete(SWIGTYPE_p_void fed) {
    double ret = helicsPINVOKE.helicsFederateRequestTimeComplete(SWIGTYPE_p_void.getCPtr(fed));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void helicsFederateRequestTimeIterativeAsync(SWIGTYPE_p_void fed, double requestTime, HelicsIterationRequest iterate) {
    helicsPINVOKE.helicsFederateRequestTimeIterativeAsync(SWIGTYPE_p_void.getCPtr(fed), requestTime, (int)iterate);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static double helicsFederateRequestTimeIterativeComplete(SWIGTYPE_p_void fed, out int outIterate) {
    double ret = helicsPINVOKE.helicsFederateRequestTimeIterativeComplete(SWIGTYPE_p_void.getCPtr(fed), out outIterate);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void helicsFederateProcessCommunications(SWIGTYPE_p_void fed, double period) {
    helicsPINVOKE.helicsFederateProcessCommunications(SWIGTYPE_p_void.getCPtr(fed), period);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static string helicsFederateGetName(SWIGTYPE_p_void fed) {
    string ret = helicsPINVOKE.helicsFederateGetName(SWIGTYPE_p_void.getCPtr(fed));
    return ret;
  }

  public static void helicsFederateSetTimeProperty(SWIGTYPE_p_void fed, int timeProperty, double time) {
    helicsPINVOKE.helicsFederateSetTimeProperty(SWIGTYPE_p_void.getCPtr(fed), timeProperty, time);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederateSetFlagOption(SWIGTYPE_p_void fed, int flag, int flagValue) {
    helicsPINVOKE.helicsFederateSetFlagOption(SWIGTYPE_p_void.getCPtr(fed), flag, flagValue);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederateSetSeparator(SWIGTYPE_p_void fed, char separator) {
    helicsPINVOKE.helicsFederateSetSeparator(SWIGTYPE_p_void.getCPtr(fed), separator);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederateSetIntegerProperty(SWIGTYPE_p_void fed, int intProperty, int propertyVal) {
    helicsPINVOKE.helicsFederateSetIntegerProperty(SWIGTYPE_p_void.getCPtr(fed), intProperty, propertyVal);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static double helicsFederateGetTimeProperty(SWIGTYPE_p_void fed, int timeProperty) {
    double ret = helicsPINVOKE.helicsFederateGetTimeProperty(SWIGTYPE_p_void.getCPtr(fed), timeProperty);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int helicsFederateGetFlagOption(SWIGTYPE_p_void fed, int flag) {
    int ret = helicsPINVOKE.helicsFederateGetFlagOption(SWIGTYPE_p_void.getCPtr(fed), flag);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int helicsFederateGetIntegerProperty(SWIGTYPE_p_void fed, int intProperty) {
    int ret = helicsPINVOKE.helicsFederateGetIntegerProperty(SWIGTYPE_p_void.getCPtr(fed), intProperty);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double helicsFederateGetCurrentTime(SWIGTYPE_p_void fed) {
    double ret = helicsPINVOKE.helicsFederateGetCurrentTime(SWIGTYPE_p_void.getCPtr(fed));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void helicsFederateAddAlias(SWIGTYPE_p_void fed, string interfaceName, string alias) {
    helicsPINVOKE.helicsFederateAddAlias(SWIGTYPE_p_void.getCPtr(fed), interfaceName, alias);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederateSetGlobal(SWIGTYPE_p_void fed, string valueName, string value) {
    helicsPINVOKE.helicsFederateSetGlobal(SWIGTYPE_p_void.getCPtr(fed), valueName, value);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederateSetTag(SWIGTYPE_p_void fed, string tagName, string value) {
    helicsPINVOKE.helicsFederateSetTag(SWIGTYPE_p_void.getCPtr(fed), tagName, value);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static string helicsFederateGetTag(SWIGTYPE_p_void fed, string tagName) {
    string ret = helicsPINVOKE.helicsFederateGetTag(SWIGTYPE_p_void.getCPtr(fed), tagName);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void helicsFederateAddDependency(SWIGTYPE_p_void fed, string fedName) {
    helicsPINVOKE.helicsFederateAddDependency(SWIGTYPE_p_void.getCPtr(fed), fedName);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederateSetLogFile(SWIGTYPE_p_void fed, string logFile) {
    helicsPINVOKE.helicsFederateSetLogFile(SWIGTYPE_p_void.getCPtr(fed), logFile);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederateLogErrorMessage(SWIGTYPE_p_void fed, string logmessage) {
    helicsPINVOKE.helicsFederateLogErrorMessage(SWIGTYPE_p_void.getCPtr(fed), logmessage);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederateLogWarningMessage(SWIGTYPE_p_void fed, string logmessage) {
    helicsPINVOKE.helicsFederateLogWarningMessage(SWIGTYPE_p_void.getCPtr(fed), logmessage);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederateLogInfoMessage(SWIGTYPE_p_void fed, string logmessage) {
    helicsPINVOKE.helicsFederateLogInfoMessage(SWIGTYPE_p_void.getCPtr(fed), logmessage);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederateLogDebugMessage(SWIGTYPE_p_void fed, string logmessage) {
    helicsPINVOKE.helicsFederateLogDebugMessage(SWIGTYPE_p_void.getCPtr(fed), logmessage);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederateLogLevelMessage(SWIGTYPE_p_void fed, int loglevel, string logmessage) {
    helicsPINVOKE.helicsFederateLogLevelMessage(SWIGTYPE_p_void.getCPtr(fed), loglevel, logmessage);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederateSendCommand(SWIGTYPE_p_void fed, string target, string command) {
    helicsPINVOKE.helicsFederateSendCommand(SWIGTYPE_p_void.getCPtr(fed), target, command);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static string helicsFederateGetCommand(SWIGTYPE_p_void fed) {
    string ret = helicsPINVOKE.helicsFederateGetCommand(SWIGTYPE_p_void.getCPtr(fed));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string helicsFederateGetCommandSource(SWIGTYPE_p_void fed) {
    string ret = helicsPINVOKE.helicsFederateGetCommandSource(SWIGTYPE_p_void.getCPtr(fed));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string helicsFederateWaitCommand(SWIGTYPE_p_void fed) {
    string ret = helicsPINVOKE.helicsFederateWaitCommand(SWIGTYPE_p_void.getCPtr(fed));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void helicsCoreSetGlobal(SWIGTYPE_p_void core, string valueName, string value) {
    helicsPINVOKE.helicsCoreSetGlobal(SWIGTYPE_p_void.getCPtr(core), valueName, value);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsBrokerSetGlobal(SWIGTYPE_p_void broker, string valueName, string value) {
    helicsPINVOKE.helicsBrokerSetGlobal(SWIGTYPE_p_void.getCPtr(broker), valueName, value);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsCoreAddAlias(SWIGTYPE_p_void core, string interfaceName, string alias) {
    helicsPINVOKE.helicsCoreAddAlias(SWIGTYPE_p_void.getCPtr(core), interfaceName, alias);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsBrokerAddAlias(SWIGTYPE_p_void broker, string interfaceName, string alias) {
    helicsPINVOKE.helicsBrokerAddAlias(SWIGTYPE_p_void.getCPtr(broker), interfaceName, alias);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsCoreSendCommand(SWIGTYPE_p_void core, string target, string command) {
    helicsPINVOKE.helicsCoreSendCommand(SWIGTYPE_p_void.getCPtr(core), target, command);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsCoreSendOrderedCommand(SWIGTYPE_p_void core, string target, string command) {
    helicsPINVOKE.helicsCoreSendOrderedCommand(SWIGTYPE_p_void.getCPtr(core), target, command);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsBrokerSendCommand(SWIGTYPE_p_void broker, string target, string command) {
    helicsPINVOKE.helicsBrokerSendCommand(SWIGTYPE_p_void.getCPtr(broker), target, command);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsBrokerSendOrderedCommand(SWIGTYPE_p_void broker, string target, string command) {
    helicsPINVOKE.helicsBrokerSendOrderedCommand(SWIGTYPE_p_void.getCPtr(broker), target, command);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsCoreSetLogFile(SWIGTYPE_p_void core, string logFileName) {
    helicsPINVOKE.helicsCoreSetLogFile(SWIGTYPE_p_void.getCPtr(core), logFileName);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsBrokerSetLogFile(SWIGTYPE_p_void broker, string logFileName) {
    helicsPINVOKE.helicsBrokerSetLogFile(SWIGTYPE_p_void.getCPtr(broker), logFileName);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsBrokerSetTimeBarrier(SWIGTYPE_p_void broker, double barrierTime) {
    helicsPINVOKE.helicsBrokerSetTimeBarrier(SWIGTYPE_p_void.getCPtr(broker), barrierTime);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsBrokerClearTimeBarrier(SWIGTYPE_p_void broker) {
    helicsPINVOKE.helicsBrokerClearTimeBarrier(SWIGTYPE_p_void.getCPtr(broker));
  }

  public static void helicsBrokerGlobalError(SWIGTYPE_p_void broker, int errorCode, string errorString) {
    helicsPINVOKE.helicsBrokerGlobalError(SWIGTYPE_p_void.getCPtr(broker), errorCode, errorString);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsCoreGlobalError(SWIGTYPE_p_void core, int errorCode, string errorString) {
    helicsPINVOKE.helicsCoreGlobalError(SWIGTYPE_p_void.getCPtr(core), errorCode, errorString);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static SWIGTYPE_p_void helicsCreateQuery(string target, string query) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsCreateQuery(target, query);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public static string helicsQueryExecute(SWIGTYPE_p_void query, SWIGTYPE_p_void fed) {
    string ret = helicsPINVOKE.helicsQueryExecute(SWIGTYPE_p_void.getCPtr(query), SWIGTYPE_p_void.getCPtr(fed));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string helicsQueryCoreExecute(SWIGTYPE_p_void query, SWIGTYPE_p_void core) {
    string ret = helicsPINVOKE.helicsQueryCoreExecute(SWIGTYPE_p_void.getCPtr(query), SWIGTYPE_p_void.getCPtr(core));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string helicsQueryBrokerExecute(SWIGTYPE_p_void query, SWIGTYPE_p_void broker) {
    string ret = helicsPINVOKE.helicsQueryBrokerExecute(SWIGTYPE_p_void.getCPtr(query), SWIGTYPE_p_void.getCPtr(broker));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void helicsQueryExecuteAsync(SWIGTYPE_p_void query, SWIGTYPE_p_void fed) {
    helicsPINVOKE.helicsQueryExecuteAsync(SWIGTYPE_p_void.getCPtr(query), SWIGTYPE_p_void.getCPtr(fed));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static string helicsQueryExecuteComplete(SWIGTYPE_p_void query) {
    string ret = helicsPINVOKE.helicsQueryExecuteComplete(SWIGTYPE_p_void.getCPtr(query));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int helicsQueryIsCompleted(SWIGTYPE_p_void query) {
    int ret = helicsPINVOKE.helicsQueryIsCompleted(SWIGTYPE_p_void.getCPtr(query));
    return ret;
  }

  public static void helicsQuerySetTarget(SWIGTYPE_p_void query, string target) {
    helicsPINVOKE.helicsQuerySetTarget(SWIGTYPE_p_void.getCPtr(query), target);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsQuerySetQueryString(SWIGTYPE_p_void query, string queryString) {
    helicsPINVOKE.helicsQuerySetQueryString(SWIGTYPE_p_void.getCPtr(query), queryString);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsQuerySetOrdering(SWIGTYPE_p_void query, SWIGTYPE_p_int32_t mode) {
    helicsPINVOKE.helicsQuerySetOrdering(SWIGTYPE_p_void.getCPtr(query), SWIGTYPE_p_int32_t.getCPtr(mode));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsQueryFree(SWIGTYPE_p_void query) {
    helicsPINVOKE.helicsQueryFree(SWIGTYPE_p_void.getCPtr(query));
  }

  public static void helicsCleanupLibrary() {
    helicsPINVOKE.helicsCleanupLibrary();
  }

  public static SWIGTYPE_p_void helicsFederateRegisterSubscription(SWIGTYPE_p_void fed, string key, string units) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsFederateRegisterSubscription(SWIGTYPE_p_void.getCPtr(fed), key, units);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void helicsFederateRegisterPublication(SWIGTYPE_p_void fed, string key, HelicsDataTypes type, string units) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsFederateRegisterPublication(SWIGTYPE_p_void.getCPtr(fed), key, (int)type, units);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void helicsFederateRegisterTypePublication(SWIGTYPE_p_void fed, string key, string type, string units) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsFederateRegisterTypePublication(SWIGTYPE_p_void.getCPtr(fed), key, type, units);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void helicsFederateRegisterGlobalPublication(SWIGTYPE_p_void fed, string key, HelicsDataTypes type, string units) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsFederateRegisterGlobalPublication(SWIGTYPE_p_void.getCPtr(fed), key, (int)type, units);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void helicsFederateRegisterGlobalTypePublication(SWIGTYPE_p_void fed, string key, string type, string units) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsFederateRegisterGlobalTypePublication(SWIGTYPE_p_void.getCPtr(fed), key, type, units);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void helicsFederateRegisterInput(SWIGTYPE_p_void fed, string key, HelicsDataTypes type, string units) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsFederateRegisterInput(SWIGTYPE_p_void.getCPtr(fed), key, (int)type, units);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void helicsFederateRegisterTypeInput(SWIGTYPE_p_void fed, string key, string type, string units) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsFederateRegisterTypeInput(SWIGTYPE_p_void.getCPtr(fed), key, type, units);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void helicsFederateRegisterGlobalInput(SWIGTYPE_p_void fed, string key, HelicsDataTypes type, string units) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsFederateRegisterGlobalInput(SWIGTYPE_p_void.getCPtr(fed), key, (int)type, units);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void helicsFederateRegisterGlobalTypeInput(SWIGTYPE_p_void fed, string key, string type, string units) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsFederateRegisterGlobalTypeInput(SWIGTYPE_p_void.getCPtr(fed), key, type, units);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void helicsFederateGetPublication(SWIGTYPE_p_void fed, string key) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsFederateGetPublication(SWIGTYPE_p_void.getCPtr(fed), key);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void helicsFederateGetPublicationByIndex(SWIGTYPE_p_void fed, int index) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsFederateGetPublicationByIndex(SWIGTYPE_p_void.getCPtr(fed), index);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void helicsFederateGetInput(SWIGTYPE_p_void fed, string key) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsFederateGetInput(SWIGTYPE_p_void.getCPtr(fed), key);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void helicsFederateGetInputByIndex(SWIGTYPE_p_void fed, int index) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsFederateGetInputByIndex(SWIGTYPE_p_void.getCPtr(fed), index);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void helicsFederateGetSubscription(SWIGTYPE_p_void fed, string key) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsFederateGetSubscription(SWIGTYPE_p_void.getCPtr(fed), key);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void helicsFederateClearUpdates(SWIGTYPE_p_void fed) {
    helicsPINVOKE.helicsFederateClearUpdates(SWIGTYPE_p_void.getCPtr(fed));
  }

  public static void helicsFederateRegisterFromPublicationJSON(SWIGTYPE_p_void fed, string json) {
    helicsPINVOKE.helicsFederateRegisterFromPublicationJSON(SWIGTYPE_p_void.getCPtr(fed), json);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederatePublishJSON(SWIGTYPE_p_void fed, string json) {
    helicsPINVOKE.helicsFederatePublishJSON(SWIGTYPE_p_void.getCPtr(fed), json);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int helicsPublicationIsValid(SWIGTYPE_p_void pub) {
    int ret = helicsPINVOKE.helicsPublicationIsValid(SWIGTYPE_p_void.getCPtr(pub));
    return ret;
  }

  public static void helicsPublicationPublishBytes(SWIGTYPE_p_void pub, SWIGTYPE_p_void data, int inputDataLength) {
    helicsPINVOKE.helicsPublicationPublishBytes(SWIGTYPE_p_void.getCPtr(pub), SWIGTYPE_p_void.getCPtr(data), inputDataLength);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsPublicationPublishString(SWIGTYPE_p_void pub, string val) {
    helicsPINVOKE.helicsPublicationPublishString(SWIGTYPE_p_void.getCPtr(pub), val);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsPublicationPublishInteger(SWIGTYPE_p_void pub, long val) {
    helicsPINVOKE.helicsPublicationPublishInteger(SWIGTYPE_p_void.getCPtr(pub), val);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsPublicationPublishBoolean(SWIGTYPE_p_void pub, int val) {
    helicsPINVOKE.helicsPublicationPublishBoolean(SWIGTYPE_p_void.getCPtr(pub), val);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsPublicationPublishDouble(SWIGTYPE_p_void pub, double val) {
    helicsPINVOKE.helicsPublicationPublishDouble(SWIGTYPE_p_void.getCPtr(pub), val);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsPublicationPublishTime(SWIGTYPE_p_void pub, double val) {
    helicsPINVOKE.helicsPublicationPublishTime(SWIGTYPE_p_void.getCPtr(pub), val);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsPublicationPublishChar(SWIGTYPE_p_void pub, char val) {
    helicsPINVOKE.helicsPublicationPublishChar(SWIGTYPE_p_void.getCPtr(pub), val);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsPublicationPublishComplex(SWIGTYPE_p_void pub, double real, double imag) {
    helicsPINVOKE.helicsPublicationPublishComplex(SWIGTYPE_p_void.getCPtr(pub), real, imag);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsPublicationPublishVector(SWIGTYPE_p_void pub, out double vectorInput, int vectorLength) {
    helicsPINVOKE.helicsPublicationPublishVector(SWIGTYPE_p_void.getCPtr(pub), out vectorInput, vectorLength);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsPublicationPublishComplexVector(SWIGTYPE_p_void pub, out double vectorInput, int vectorLength) {
    helicsPINVOKE.helicsPublicationPublishComplexVector(SWIGTYPE_p_void.getCPtr(pub), out vectorInput, vectorLength);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsPublicationPublishNamedPoint(SWIGTYPE_p_void pub, string field, double val) {
    helicsPINVOKE.helicsPublicationPublishNamedPoint(SWIGTYPE_p_void.getCPtr(pub), field, val);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsPublicationAddTarget(SWIGTYPE_p_void pub, string target) {
    helicsPINVOKE.helicsPublicationAddTarget(SWIGTYPE_p_void.getCPtr(pub), target);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int helicsInputIsValid(SWIGTYPE_p_void ipt) {
    int ret = helicsPINVOKE.helicsInputIsValid(SWIGTYPE_p_void.getCPtr(ipt));
    return ret;
  }

  public static void helicsInputAddTarget(SWIGTYPE_p_void ipt, string target) {
    helicsPINVOKE.helicsInputAddTarget(SWIGTYPE_p_void.getCPtr(ipt), target);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int helicsInputGetByteCount(SWIGTYPE_p_void ipt) {
    int ret = helicsPINVOKE.helicsInputGetByteCount(SWIGTYPE_p_void.getCPtr(ipt));
    return ret;
  }

  public static void helicsInputGetBytes(SWIGTYPE_p_void ipt, SWIGTYPE_p_void data, int maxDataLength, out int actualSize) {
    helicsPINVOKE.helicsInputGetBytes(SWIGTYPE_p_void.getCPtr(ipt), SWIGTYPE_p_void.getCPtr(data), maxDataLength, out actualSize);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int helicsInputGetStringSize(SWIGTYPE_p_void ipt) {
    int ret = helicsPINVOKE.helicsInputGetStringSize(SWIGTYPE_p_void.getCPtr(ipt));
    return ret;
  }

  public static void helicsInputGetString(SWIGTYPE_p_void ipt, string outputString, int maxStringLength, out int actualLength) {
    helicsPINVOKE.helicsInputGetString(SWIGTYPE_p_void.getCPtr(ipt), outputString, maxStringLength, out actualLength);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static long helicsInputGetInteger(SWIGTYPE_p_void ipt) {
    long ret = helicsPINVOKE.helicsInputGetInteger(SWIGTYPE_p_void.getCPtr(ipt));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int helicsInputGetBoolean(SWIGTYPE_p_void ipt) {
    int ret = helicsPINVOKE.helicsInputGetBoolean(SWIGTYPE_p_void.getCPtr(ipt));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double helicsInputGetDouble(SWIGTYPE_p_void ipt) {
    double ret = helicsPINVOKE.helicsInputGetDouble(SWIGTYPE_p_void.getCPtr(ipt));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double helicsInputGetTime(SWIGTYPE_p_void ipt) {
    double ret = helicsPINVOKE.helicsInputGetTime(SWIGTYPE_p_void.getCPtr(ipt));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static char helicsInputGetChar(SWIGTYPE_p_void ipt) {
    char ret = helicsPINVOKE.helicsInputGetChar(SWIGTYPE_p_void.getCPtr(ipt));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static HelicsComplex helicsInputGetComplexObject(SWIGTYPE_p_void ipt) {
    HelicsComplex ret = new HelicsComplex(helicsPINVOKE.helicsInputGetComplexObject(SWIGTYPE_p_void.getCPtr(ipt)), true);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void helicsInputGetComplex(SWIGTYPE_p_void ipt, out double real, out double imag) {
    helicsPINVOKE.helicsInputGetComplex(SWIGTYPE_p_void.getCPtr(ipt), out real, out imag);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int helicsInputGetVectorSize(SWIGTYPE_p_void ipt) {
    int ret = helicsPINVOKE.helicsInputGetVectorSize(SWIGTYPE_p_void.getCPtr(ipt));
    return ret;
  }

  public static void helicsInputGetVector(SWIGTYPE_p_void ipt, SWIGTYPE_p_double data, int maxLength, out int actualSize) {
    helicsPINVOKE.helicsInputGetVector(SWIGTYPE_p_void.getCPtr(ipt), SWIGTYPE_p_double.getCPtr(data), maxLength, out actualSize);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsInputGetComplexVector(SWIGTYPE_p_void ipt, SWIGTYPE_p_double data, int maxLength, out int actualSize) {
    helicsPINVOKE.helicsInputGetComplexVector(SWIGTYPE_p_void.getCPtr(ipt), SWIGTYPE_p_double.getCPtr(data), maxLength, out actualSize);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsInputGetNamedPoint(SWIGTYPE_p_void ipt, string outputString, int maxStringLength, out int actualLength, out double val) {
    helicsPINVOKE.helicsInputGetNamedPoint(SWIGTYPE_p_void.getCPtr(ipt), outputString, maxStringLength, out actualLength, out val);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsInputSetDefaultBytes(SWIGTYPE_p_void ipt, SWIGTYPE_p_void data, int inputDataLength) {
    helicsPINVOKE.helicsInputSetDefaultBytes(SWIGTYPE_p_void.getCPtr(ipt), SWIGTYPE_p_void.getCPtr(data), inputDataLength);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsInputSetDefaultString(SWIGTYPE_p_void ipt, string defaultString) {
    helicsPINVOKE.helicsInputSetDefaultString(SWIGTYPE_p_void.getCPtr(ipt), defaultString);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsInputSetDefaultInteger(SWIGTYPE_p_void ipt, long val) {
    helicsPINVOKE.helicsInputSetDefaultInteger(SWIGTYPE_p_void.getCPtr(ipt), val);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsInputSetDefaultBoolean(SWIGTYPE_p_void ipt, int val) {
    helicsPINVOKE.helicsInputSetDefaultBoolean(SWIGTYPE_p_void.getCPtr(ipt), val);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsInputSetDefaultTime(SWIGTYPE_p_void ipt, double val) {
    helicsPINVOKE.helicsInputSetDefaultTime(SWIGTYPE_p_void.getCPtr(ipt), val);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsInputSetDefaultChar(SWIGTYPE_p_void ipt, char val) {
    helicsPINVOKE.helicsInputSetDefaultChar(SWIGTYPE_p_void.getCPtr(ipt), val);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsInputSetDefaultDouble(SWIGTYPE_p_void ipt, double val) {
    helicsPINVOKE.helicsInputSetDefaultDouble(SWIGTYPE_p_void.getCPtr(ipt), val);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsInputSetDefaultComplex(SWIGTYPE_p_void ipt, double real, double imag) {
    helicsPINVOKE.helicsInputSetDefaultComplex(SWIGTYPE_p_void.getCPtr(ipt), real, imag);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsInputSetDefaultVector(SWIGTYPE_p_void ipt, out double vectorInput, int vectorLength) {
    helicsPINVOKE.helicsInputSetDefaultVector(SWIGTYPE_p_void.getCPtr(ipt), out vectorInput, vectorLength);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsInputSetDefaultComplexVector(SWIGTYPE_p_void ipt, out double vectorInput, int vectorLength) {
    helicsPINVOKE.helicsInputSetDefaultComplexVector(SWIGTYPE_p_void.getCPtr(ipt), out vectorInput, vectorLength);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsInputSetDefaultNamedPoint(SWIGTYPE_p_void ipt, string defaultName, double val) {
    helicsPINVOKE.helicsInputSetDefaultNamedPoint(SWIGTYPE_p_void.getCPtr(ipt), defaultName, val);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static string helicsInputGetType(SWIGTYPE_p_void ipt) {
    string ret = helicsPINVOKE.helicsInputGetType(SWIGTYPE_p_void.getCPtr(ipt));
    return ret;
  }

  public static string helicsInputGetPublicationType(SWIGTYPE_p_void ipt) {
    string ret = helicsPINVOKE.helicsInputGetPublicationType(SWIGTYPE_p_void.getCPtr(ipt));
    return ret;
  }

  public static int helicsInputGetPublicationDataType(SWIGTYPE_p_void ipt) {
    int ret = helicsPINVOKE.helicsInputGetPublicationDataType(SWIGTYPE_p_void.getCPtr(ipt));
    return ret;
  }

  public static string helicsPublicationGetType(SWIGTYPE_p_void pub) {
    string ret = helicsPINVOKE.helicsPublicationGetType(SWIGTYPE_p_void.getCPtr(pub));
    return ret;
  }

  public static string helicsInputGetName(SWIGTYPE_p_void ipt) {
    string ret = helicsPINVOKE.helicsInputGetName(SWIGTYPE_p_void.getCPtr(ipt));
    return ret;
  }

  public static string helicsSubscriptionGetTarget(SWIGTYPE_p_void ipt) {
    string ret = helicsPINVOKE.helicsSubscriptionGetTarget(SWIGTYPE_p_void.getCPtr(ipt));
    return ret;
  }

  public static string helicsPublicationGetName(SWIGTYPE_p_void pub) {
    string ret = helicsPINVOKE.helicsPublicationGetName(SWIGTYPE_p_void.getCPtr(pub));
    return ret;
  }

  public static string helicsInputGetUnits(SWIGTYPE_p_void ipt) {
    string ret = helicsPINVOKE.helicsInputGetUnits(SWIGTYPE_p_void.getCPtr(ipt));
    return ret;
  }

  public static string helicsInputGetInjectionUnits(SWIGTYPE_p_void ipt) {
    string ret = helicsPINVOKE.helicsInputGetInjectionUnits(SWIGTYPE_p_void.getCPtr(ipt));
    return ret;
  }

  public static string helicsInputGetExtractionUnits(SWIGTYPE_p_void ipt) {
    string ret = helicsPINVOKE.helicsInputGetExtractionUnits(SWIGTYPE_p_void.getCPtr(ipt));
    return ret;
  }

  public static string helicsPublicationGetUnits(SWIGTYPE_p_void pub) {
    string ret = helicsPINVOKE.helicsPublicationGetUnits(SWIGTYPE_p_void.getCPtr(pub));
    return ret;
  }

  public static string helicsInputGetInfo(SWIGTYPE_p_void inp) {
    string ret = helicsPINVOKE.helicsInputGetInfo(SWIGTYPE_p_void.getCPtr(inp));
    return ret;
  }

  public static void helicsInputSetInfo(SWIGTYPE_p_void inp, string info) {
    helicsPINVOKE.helicsInputSetInfo(SWIGTYPE_p_void.getCPtr(inp), info);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static string helicsInputGetTag(SWIGTYPE_p_void inp, string tagname) {
    string ret = helicsPINVOKE.helicsInputGetTag(SWIGTYPE_p_void.getCPtr(inp), tagname);
    return ret;
  }

  public static void helicsInputSetTag(SWIGTYPE_p_void inp, string tagname, string tagvalue) {
    helicsPINVOKE.helicsInputSetTag(SWIGTYPE_p_void.getCPtr(inp), tagname, tagvalue);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static string helicsPublicationGetInfo(SWIGTYPE_p_void pub) {
    string ret = helicsPINVOKE.helicsPublicationGetInfo(SWIGTYPE_p_void.getCPtr(pub));
    return ret;
  }

  public static void helicsPublicationSetInfo(SWIGTYPE_p_void pub, string info) {
    helicsPINVOKE.helicsPublicationSetInfo(SWIGTYPE_p_void.getCPtr(pub), info);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static string helicsPublicationGetTag(SWIGTYPE_p_void pub, string tagname) {
    string ret = helicsPINVOKE.helicsPublicationGetTag(SWIGTYPE_p_void.getCPtr(pub), tagname);
    return ret;
  }

  public static void helicsPublicationSetTag(SWIGTYPE_p_void pub, string tagname, string tagvalue) {
    helicsPINVOKE.helicsPublicationSetTag(SWIGTYPE_p_void.getCPtr(pub), tagname, tagvalue);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int helicsInputGetOption(SWIGTYPE_p_void inp, int option) {
    int ret = helicsPINVOKE.helicsInputGetOption(SWIGTYPE_p_void.getCPtr(inp), option);
    return ret;
  }

  public static void helicsInputSetOption(SWIGTYPE_p_void inp, int option, int value) {
    helicsPINVOKE.helicsInputSetOption(SWIGTYPE_p_void.getCPtr(inp), option, value);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int helicsPublicationGetOption(SWIGTYPE_p_void pub, int option) {
    int ret = helicsPINVOKE.helicsPublicationGetOption(SWIGTYPE_p_void.getCPtr(pub), option);
    return ret;
  }

  public static void helicsPublicationSetOption(SWIGTYPE_p_void pub, int option, int val) {
    helicsPINVOKE.helicsPublicationSetOption(SWIGTYPE_p_void.getCPtr(pub), option, val);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsPublicationSetMinimumChange(SWIGTYPE_p_void pub, double tolerance) {
    helicsPINVOKE.helicsPublicationSetMinimumChange(SWIGTYPE_p_void.getCPtr(pub), tolerance);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsInputSetMinimumChange(SWIGTYPE_p_void inp, double tolerance) {
    helicsPINVOKE.helicsInputSetMinimumChange(SWIGTYPE_p_void.getCPtr(inp), tolerance);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int helicsInputIsUpdated(SWIGTYPE_p_void ipt) {
    int ret = helicsPINVOKE.helicsInputIsUpdated(SWIGTYPE_p_void.getCPtr(ipt));
    return ret;
  }

  public static double helicsInputLastUpdateTime(SWIGTYPE_p_void ipt) {
    double ret = helicsPINVOKE.helicsInputLastUpdateTime(SWIGTYPE_p_void.getCPtr(ipt));
    return ret;
  }

  public static void helicsInputClearUpdate(SWIGTYPE_p_void ipt) {
    helicsPINVOKE.helicsInputClearUpdate(SWIGTYPE_p_void.getCPtr(ipt));
  }

  public static int helicsFederateGetPublicationCount(SWIGTYPE_p_void fed) {
    int ret = helicsPINVOKE.helicsFederateGetPublicationCount(SWIGTYPE_p_void.getCPtr(fed));
    return ret;
  }

  public static int helicsFederateGetInputCount(SWIGTYPE_p_void fed) {
    int ret = helicsPINVOKE.helicsFederateGetInputCount(SWIGTYPE_p_void.getCPtr(fed));
    return ret;
  }

  public static SWIGTYPE_p_void helicsFederateRegisterEndpoint(SWIGTYPE_p_void fed, string name, string type) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsFederateRegisterEndpoint(SWIGTYPE_p_void.getCPtr(fed), name, type);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void helicsFederateRegisterGlobalEndpoint(SWIGTYPE_p_void fed, string name, string type) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsFederateRegisterGlobalEndpoint(SWIGTYPE_p_void.getCPtr(fed), name, type);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void helicsFederateRegisterTargetedEndpoint(SWIGTYPE_p_void fed, string name, string type) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsFederateRegisterTargetedEndpoint(SWIGTYPE_p_void.getCPtr(fed), name, type);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void helicsFederateRegisterGlobalTargetedEndpoint(SWIGTYPE_p_void fed, string name, string type) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsFederateRegisterGlobalTargetedEndpoint(SWIGTYPE_p_void.getCPtr(fed), name, type);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void helicsFederateGetEndpoint(SWIGTYPE_p_void fed, string name) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsFederateGetEndpoint(SWIGTYPE_p_void.getCPtr(fed), name);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void helicsFederateGetEndpointByIndex(SWIGTYPE_p_void fed, int index) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsFederateGetEndpointByIndex(SWIGTYPE_p_void.getCPtr(fed), index);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int helicsEndpointIsValid(SWIGTYPE_p_void endpoint) {
    int ret = helicsPINVOKE.helicsEndpointIsValid(SWIGTYPE_p_void.getCPtr(endpoint));
    return ret;
  }

  public static void helicsEndpointSetDefaultDestination(SWIGTYPE_p_void endpoint, string dst) {
    helicsPINVOKE.helicsEndpointSetDefaultDestination(SWIGTYPE_p_void.getCPtr(endpoint), dst);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static string helicsEndpointGetDefaultDestination(SWIGTYPE_p_void endpoint) {
    string ret = helicsPINVOKE.helicsEndpointGetDefaultDestination(SWIGTYPE_p_void.getCPtr(endpoint));
    return ret;
  }

  public static void helicsEndpointSendBytes(SWIGTYPE_p_void endpoint, SWIGTYPE_p_void data, int inputDataLength) {
    helicsPINVOKE.helicsEndpointSendBytes(SWIGTYPE_p_void.getCPtr(endpoint), SWIGTYPE_p_void.getCPtr(data), inputDataLength);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsEndpointSendBytesTo(SWIGTYPE_p_void endpoint, SWIGTYPE_p_void data, int inputDataLength, string dst) {
    helicsPINVOKE.helicsEndpointSendBytesTo(SWIGTYPE_p_void.getCPtr(endpoint), SWIGTYPE_p_void.getCPtr(data), inputDataLength, dst);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsEndpointSendBytesToAt(SWIGTYPE_p_void endpoint, SWIGTYPE_p_void data, int inputDataLength, string dst, double time) {
    helicsPINVOKE.helicsEndpointSendBytesToAt(SWIGTYPE_p_void.getCPtr(endpoint), SWIGTYPE_p_void.getCPtr(data), inputDataLength, dst, time);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsEndpointSendBytesAt(SWIGTYPE_p_void endpoint, SWIGTYPE_p_void data, int inputDataLength, double time) {
    helicsPINVOKE.helicsEndpointSendBytesAt(SWIGTYPE_p_void.getCPtr(endpoint), SWIGTYPE_p_void.getCPtr(data), inputDataLength, time);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsEndpointSendMessage(SWIGTYPE_p_void endpoint, SWIGTYPE_p_void message) {
    helicsPINVOKE.helicsEndpointSendMessage(SWIGTYPE_p_void.getCPtr(endpoint), SWIGTYPE_p_void.getCPtr(message));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsEndpointSendMessageZeroCopy(SWIGTYPE_p_void endpoint, SWIGTYPE_p_void message) {
    helicsPINVOKE.helicsEndpointSendMessageZeroCopy(SWIGTYPE_p_void.getCPtr(endpoint), SWIGTYPE_p_void.getCPtr(message));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsEndpointSubscribe(SWIGTYPE_p_void endpoint, string key) {
    helicsPINVOKE.helicsEndpointSubscribe(SWIGTYPE_p_void.getCPtr(endpoint), key);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int helicsFederateHasMessage(SWIGTYPE_p_void fed) {
    int ret = helicsPINVOKE.helicsFederateHasMessage(SWIGTYPE_p_void.getCPtr(fed));
    return ret;
  }

  public static int helicsEndpointHasMessage(SWIGTYPE_p_void endpoint) {
    int ret = helicsPINVOKE.helicsEndpointHasMessage(SWIGTYPE_p_void.getCPtr(endpoint));
    return ret;
  }

  public static int helicsFederatePendingMessageCount(SWIGTYPE_p_void fed) {
    int ret = helicsPINVOKE.helicsFederatePendingMessageCount(SWIGTYPE_p_void.getCPtr(fed));
    return ret;
  }

  public static int helicsEndpointPendingMessageCount(SWIGTYPE_p_void endpoint) {
    int ret = helicsPINVOKE.helicsEndpointPendingMessageCount(SWIGTYPE_p_void.getCPtr(endpoint));
    return ret;
  }

  public static SWIGTYPE_p_void helicsEndpointGetMessage(SWIGTYPE_p_void endpoint) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsEndpointGetMessage(SWIGTYPE_p_void.getCPtr(endpoint));
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_void helicsEndpointCreateMessage(SWIGTYPE_p_void endpoint) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsEndpointCreateMessage(SWIGTYPE_p_void.getCPtr(endpoint));
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void helicsEndpointClearMessages(SWIGTYPE_p_void endpoint) {
    helicsPINVOKE.helicsEndpointClearMessages(SWIGTYPE_p_void.getCPtr(endpoint));
  }

  public static SWIGTYPE_p_void helicsFederateGetMessage(SWIGTYPE_p_void fed) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsFederateGetMessage(SWIGTYPE_p_void.getCPtr(fed));
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_void helicsFederateCreateMessage(SWIGTYPE_p_void fed) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsFederateCreateMessage(SWIGTYPE_p_void.getCPtr(fed));
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void helicsFederateClearMessages(SWIGTYPE_p_void fed) {
    helicsPINVOKE.helicsFederateClearMessages(SWIGTYPE_p_void.getCPtr(fed));
  }

  public static string helicsEndpointGetType(SWIGTYPE_p_void endpoint) {
    string ret = helicsPINVOKE.helicsEndpointGetType(SWIGTYPE_p_void.getCPtr(endpoint));
    return ret;
  }

  public static string helicsEndpointGetName(SWIGTYPE_p_void endpoint) {
    string ret = helicsPINVOKE.helicsEndpointGetName(SWIGTYPE_p_void.getCPtr(endpoint));
    return ret;
  }

  public static int helicsFederateGetEndpointCount(SWIGTYPE_p_void fed) {
    int ret = helicsPINVOKE.helicsFederateGetEndpointCount(SWIGTYPE_p_void.getCPtr(fed));
    return ret;
  }

  public static string helicsEndpointGetInfo(SWIGTYPE_p_void end) {
    string ret = helicsPINVOKE.helicsEndpointGetInfo(SWIGTYPE_p_void.getCPtr(end));
    return ret;
  }

  public static void helicsEndpointSetInfo(SWIGTYPE_p_void endpoint, string info) {
    helicsPINVOKE.helicsEndpointSetInfo(SWIGTYPE_p_void.getCPtr(endpoint), info);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static string helicsEndpointGetTag(SWIGTYPE_p_void endpoint, string tagname) {
    string ret = helicsPINVOKE.helicsEndpointGetTag(SWIGTYPE_p_void.getCPtr(endpoint), tagname);
    return ret;
  }

  public static void helicsEndpointSetTag(SWIGTYPE_p_void endpoint, string tagname, string tagvalue) {
    helicsPINVOKE.helicsEndpointSetTag(SWIGTYPE_p_void.getCPtr(endpoint), tagname, tagvalue);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsEndpointSetOption(SWIGTYPE_p_void endpoint, int option, int value) {
    helicsPINVOKE.helicsEndpointSetOption(SWIGTYPE_p_void.getCPtr(endpoint), option, value);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int helicsEndpointGetOption(SWIGTYPE_p_void endpoint, int option) {
    int ret = helicsPINVOKE.helicsEndpointGetOption(SWIGTYPE_p_void.getCPtr(endpoint), option);
    return ret;
  }

  public static void helicsEndpointAddSourceTarget(SWIGTYPE_p_void endpoint, string targetEndpoint) {
    helicsPINVOKE.helicsEndpointAddSourceTarget(SWIGTYPE_p_void.getCPtr(endpoint), targetEndpoint);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsEndpointAddDestinationTarget(SWIGTYPE_p_void endpoint, string targetEndpoint) {
    helicsPINVOKE.helicsEndpointAddDestinationTarget(SWIGTYPE_p_void.getCPtr(endpoint), targetEndpoint);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsEndpointRemoveTarget(SWIGTYPE_p_void endpoint, string targetEndpoint) {
    helicsPINVOKE.helicsEndpointRemoveTarget(SWIGTYPE_p_void.getCPtr(endpoint), targetEndpoint);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsEndpointAddSourceFilter(SWIGTYPE_p_void endpoint, string filterName) {
    helicsPINVOKE.helicsEndpointAddSourceFilter(SWIGTYPE_p_void.getCPtr(endpoint), filterName);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsEndpointAddDestinationFilter(SWIGTYPE_p_void endpoint, string filterName) {
    helicsPINVOKE.helicsEndpointAddDestinationFilter(SWIGTYPE_p_void.getCPtr(endpoint), filterName);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static string helicsMessageGetSource(SWIGTYPE_p_void message) {
    string ret = helicsPINVOKE.helicsMessageGetSource(SWIGTYPE_p_void.getCPtr(message));
    return ret;
  }

  public static string helicsMessageGetDestination(SWIGTYPE_p_void message) {
    string ret = helicsPINVOKE.helicsMessageGetDestination(SWIGTYPE_p_void.getCPtr(message));
    return ret;
  }

  public static string helicsMessageGetOriginalSource(SWIGTYPE_p_void message) {
    string ret = helicsPINVOKE.helicsMessageGetOriginalSource(SWIGTYPE_p_void.getCPtr(message));
    return ret;
  }

  public static string helicsMessageGetOriginalDestination(SWIGTYPE_p_void message) {
    string ret = helicsPINVOKE.helicsMessageGetOriginalDestination(SWIGTYPE_p_void.getCPtr(message));
    return ret;
  }

  public static double helicsMessageGetTime(SWIGTYPE_p_void message) {
    double ret = helicsPINVOKE.helicsMessageGetTime(SWIGTYPE_p_void.getCPtr(message));
    return ret;
  }

  public static string helicsMessageGetString(SWIGTYPE_p_void message) {
    string ret = helicsPINVOKE.helicsMessageGetString(SWIGTYPE_p_void.getCPtr(message));
    return ret;
  }

  public static int helicsMessageGetMessageID(SWIGTYPE_p_void message) {
    int ret = helicsPINVOKE.helicsMessageGetMessageID(SWIGTYPE_p_void.getCPtr(message));
    return ret;
  }

  public static int helicsMessageGetFlagOption(SWIGTYPE_p_void message, int flag) {
    int ret = helicsPINVOKE.helicsMessageGetFlagOption(SWIGTYPE_p_void.getCPtr(message), flag);
    return ret;
  }

  public static int helicsMessageGetByteCount(SWIGTYPE_p_void message) {
    int ret = helicsPINVOKE.helicsMessageGetByteCount(SWIGTYPE_p_void.getCPtr(message));
    return ret;
  }

  public static void helicsMessageGetBytes(SWIGTYPE_p_void message, SWIGTYPE_p_void data, int maxMessageLength, out int actualSize) {
    helicsPINVOKE.helicsMessageGetBytes(SWIGTYPE_p_void.getCPtr(message), SWIGTYPE_p_void.getCPtr(data), maxMessageLength, out actualSize);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static SWIGTYPE_p_void helicsMessageGetBytesPointer(SWIGTYPE_p_void message) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsMessageGetBytesPointer(SWIGTYPE_p_void.getCPtr(message));
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public static int helicsMessageIsValid(SWIGTYPE_p_void message) {
    int ret = helicsPINVOKE.helicsMessageIsValid(SWIGTYPE_p_void.getCPtr(message));
    return ret;
  }

  public static void helicsMessageSetSource(SWIGTYPE_p_void message, string src) {
    helicsPINVOKE.helicsMessageSetSource(SWIGTYPE_p_void.getCPtr(message), src);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsMessageSetDestination(SWIGTYPE_p_void message, string dst) {
    helicsPINVOKE.helicsMessageSetDestination(SWIGTYPE_p_void.getCPtr(message), dst);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsMessageSetOriginalSource(SWIGTYPE_p_void message, string src) {
    helicsPINVOKE.helicsMessageSetOriginalSource(SWIGTYPE_p_void.getCPtr(message), src);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsMessageSetOriginalDestination(SWIGTYPE_p_void message, string dst) {
    helicsPINVOKE.helicsMessageSetOriginalDestination(SWIGTYPE_p_void.getCPtr(message), dst);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsMessageSetTime(SWIGTYPE_p_void message, double time) {
    helicsPINVOKE.helicsMessageSetTime(SWIGTYPE_p_void.getCPtr(message), time);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsMessageReserve(SWIGTYPE_p_void message, int reserveSize) {
    helicsPINVOKE.helicsMessageReserve(SWIGTYPE_p_void.getCPtr(message), reserveSize);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsMessageSetMessageID(SWIGTYPE_p_void message, SWIGTYPE_p_int32_t messageID) {
    helicsPINVOKE.helicsMessageSetMessageID(SWIGTYPE_p_void.getCPtr(message), SWIGTYPE_p_int32_t.getCPtr(messageID));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsMessageClearFlags(SWIGTYPE_p_void message) {
    helicsPINVOKE.helicsMessageClearFlags(SWIGTYPE_p_void.getCPtr(message));
  }

  public static void helicsMessageSetFlagOption(SWIGTYPE_p_void message, int flag, int flagValue) {
    helicsPINVOKE.helicsMessageSetFlagOption(SWIGTYPE_p_void.getCPtr(message), flag, flagValue);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsMessageSetString(SWIGTYPE_p_void message, string data) {
    helicsPINVOKE.helicsMessageSetString(SWIGTYPE_p_void.getCPtr(message), data);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsMessageSetData(SWIGTYPE_p_void message, SWIGTYPE_p_void data, int inputDataLength) {
    helicsPINVOKE.helicsMessageSetData(SWIGTYPE_p_void.getCPtr(message), SWIGTYPE_p_void.getCPtr(data), inputDataLength);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsMessageAppendData(SWIGTYPE_p_void message, SWIGTYPE_p_void data, int inputDataLength) {
    helicsPINVOKE.helicsMessageAppendData(SWIGTYPE_p_void.getCPtr(message), SWIGTYPE_p_void.getCPtr(data), inputDataLength);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsMessageCopy(SWIGTYPE_p_void src_message, SWIGTYPE_p_void dst_message) {
    helicsPINVOKE.helicsMessageCopy(SWIGTYPE_p_void.getCPtr(src_message), SWIGTYPE_p_void.getCPtr(dst_message));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static SWIGTYPE_p_void helicsMessageClone(SWIGTYPE_p_void message) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsMessageClone(SWIGTYPE_p_void.getCPtr(message));
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void helicsMessageFree(SWIGTYPE_p_void message) {
    helicsPINVOKE.helicsMessageFree(SWIGTYPE_p_void.getCPtr(message));
  }

  public static void helicsMessageClear(SWIGTYPE_p_void message) {
    helicsPINVOKE.helicsMessageClear(SWIGTYPE_p_void.getCPtr(message));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static SWIGTYPE_p_void helicsFederateRegisterFilter(SWIGTYPE_p_void fed, HelicsFilterTypes type, string name) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsFederateRegisterFilter(SWIGTYPE_p_void.getCPtr(fed), (int)type, name);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void helicsFederateRegisterGlobalFilter(SWIGTYPE_p_void fed, HelicsFilterTypes type, string name) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsFederateRegisterGlobalFilter(SWIGTYPE_p_void.getCPtr(fed), (int)type, name);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void helicsFederateRegisterCloningFilter(SWIGTYPE_p_void fed, string name) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsFederateRegisterCloningFilter(SWIGTYPE_p_void.getCPtr(fed), name);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void helicsFederateRegisterGlobalCloningFilter(SWIGTYPE_p_void fed, string name) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsFederateRegisterGlobalCloningFilter(SWIGTYPE_p_void.getCPtr(fed), name);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void helicsCoreRegisterFilter(SWIGTYPE_p_void core, HelicsFilterTypes type, string name) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsCoreRegisterFilter(SWIGTYPE_p_void.getCPtr(core), (int)type, name);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void helicsCoreRegisterCloningFilter(SWIGTYPE_p_void core, string name) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsCoreRegisterCloningFilter(SWIGTYPE_p_void.getCPtr(core), name);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int helicsFederateGetFilterCount(SWIGTYPE_p_void fed) {
    int ret = helicsPINVOKE.helicsFederateGetFilterCount(SWIGTYPE_p_void.getCPtr(fed));
    return ret;
  }

  public static SWIGTYPE_p_void helicsFederateGetFilter(SWIGTYPE_p_void fed, string name) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsFederateGetFilter(SWIGTYPE_p_void.getCPtr(fed), name);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void helicsFederateGetFilterByIndex(SWIGTYPE_p_void fed, int index) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsFederateGetFilterByIndex(SWIGTYPE_p_void.getCPtr(fed), index);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int helicsFilterIsValid(SWIGTYPE_p_void filt) {
    int ret = helicsPINVOKE.helicsFilterIsValid(SWIGTYPE_p_void.getCPtr(filt));
    return ret;
  }

  public static string helicsFilterGetName(SWIGTYPE_p_void filt) {
    string ret = helicsPINVOKE.helicsFilterGetName(SWIGTYPE_p_void.getCPtr(filt));
    return ret;
  }

  public static void helicsFilterSet(SWIGTYPE_p_void filt, string prop, double val) {
    helicsPINVOKE.helicsFilterSet(SWIGTYPE_p_void.getCPtr(filt), prop, val);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFilterSetString(SWIGTYPE_p_void filt, string prop, string val) {
    helicsPINVOKE.helicsFilterSetString(SWIGTYPE_p_void.getCPtr(filt), prop, val);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFilterAddDestinationTarget(SWIGTYPE_p_void filt, string dst) {
    helicsPINVOKE.helicsFilterAddDestinationTarget(SWIGTYPE_p_void.getCPtr(filt), dst);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFilterAddSourceTarget(SWIGTYPE_p_void filt, string source) {
    helicsPINVOKE.helicsFilterAddSourceTarget(SWIGTYPE_p_void.getCPtr(filt), source);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFilterAddDeliveryEndpoint(SWIGTYPE_p_void filt, string deliveryEndpoint) {
    helicsPINVOKE.helicsFilterAddDeliveryEndpoint(SWIGTYPE_p_void.getCPtr(filt), deliveryEndpoint);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFilterRemoveTarget(SWIGTYPE_p_void filt, string target) {
    helicsPINVOKE.helicsFilterRemoveTarget(SWIGTYPE_p_void.getCPtr(filt), target);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFilterRemoveDeliveryEndpoint(SWIGTYPE_p_void filt, string deliveryEndpoint) {
    helicsPINVOKE.helicsFilterRemoveDeliveryEndpoint(SWIGTYPE_p_void.getCPtr(filt), deliveryEndpoint);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static string helicsFilterGetInfo(SWIGTYPE_p_void filt) {
    string ret = helicsPINVOKE.helicsFilterGetInfo(SWIGTYPE_p_void.getCPtr(filt));
    return ret;
  }

  public static void helicsFilterSetInfo(SWIGTYPE_p_void filt, string info) {
    helicsPINVOKE.helicsFilterSetInfo(SWIGTYPE_p_void.getCPtr(filt), info);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static string helicsFilterGetTag(SWIGTYPE_p_void filt, string tagname) {
    string ret = helicsPINVOKE.helicsFilterGetTag(SWIGTYPE_p_void.getCPtr(filt), tagname);
    return ret;
  }

  public static void helicsFilterSetTag(SWIGTYPE_p_void filt, string tagname, string tagvalue) {
    helicsPINVOKE.helicsFilterSetTag(SWIGTYPE_p_void.getCPtr(filt), tagname, tagvalue);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFilterSetOption(SWIGTYPE_p_void filt, int option, int value) {
    helicsPINVOKE.helicsFilterSetOption(SWIGTYPE_p_void.getCPtr(filt), option, value);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int helicsFilterGetOption(SWIGTYPE_p_void filt, int option) {
    int ret = helicsPINVOKE.helicsFilterGetOption(SWIGTYPE_p_void.getCPtr(filt), option);
    return ret;
  }

  public static SWIGTYPE_p_void helicsFederateRegisterTranslator(SWIGTYPE_p_void fed, HelicsTranslatorTypes type, string name) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsFederateRegisterTranslator(SWIGTYPE_p_void.getCPtr(fed), (int)type, name);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void helicsFederateRegisterGlobalTranslator(SWIGTYPE_p_void fed, HelicsTranslatorTypes type, string name) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsFederateRegisterGlobalTranslator(SWIGTYPE_p_void.getCPtr(fed), (int)type, name);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void helicsCoreRegisterTranslator(SWIGTYPE_p_void core, HelicsTranslatorTypes type, string name) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsCoreRegisterTranslator(SWIGTYPE_p_void.getCPtr(core), (int)type, name);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int helicsFederateGetTranslatorCount(SWIGTYPE_p_void fed) {
    int ret = helicsPINVOKE.helicsFederateGetTranslatorCount(SWIGTYPE_p_void.getCPtr(fed));
    return ret;
  }

  public static SWIGTYPE_p_void helicsFederateGetTranslator(SWIGTYPE_p_void fed, string name) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsFederateGetTranslator(SWIGTYPE_p_void.getCPtr(fed), name);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void helicsFederateGetTranslatorByIndex(SWIGTYPE_p_void fed, int index) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsFederateGetTranslatorByIndex(SWIGTYPE_p_void.getCPtr(fed), index);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int helicsTranslatorIsValid(SWIGTYPE_p_void trans) {
    int ret = helicsPINVOKE.helicsTranslatorIsValid(SWIGTYPE_p_void.getCPtr(trans));
    return ret;
  }

  public static string helicsTranslatorGetName(SWIGTYPE_p_void trans) {
    string ret = helicsPINVOKE.helicsTranslatorGetName(SWIGTYPE_p_void.getCPtr(trans));
    return ret;
  }

  public static void helicsTranslatorSet(SWIGTYPE_p_void trans, string prop, double val) {
    helicsPINVOKE.helicsTranslatorSet(SWIGTYPE_p_void.getCPtr(trans), prop, val);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsTranslatorSetString(SWIGTYPE_p_void trans, string prop, string val) {
    helicsPINVOKE.helicsTranslatorSetString(SWIGTYPE_p_void.getCPtr(trans), prop, val);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsTranslatorAddInputTarget(SWIGTYPE_p_void trans, string input) {
    helicsPINVOKE.helicsTranslatorAddInputTarget(SWIGTYPE_p_void.getCPtr(trans), input);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsTranslatorAddPublicationTarget(SWIGTYPE_p_void trans, string pub) {
    helicsPINVOKE.helicsTranslatorAddPublicationTarget(SWIGTYPE_p_void.getCPtr(trans), pub);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsTranslatorAddSourceEndpoint(SWIGTYPE_p_void trans, string ept) {
    helicsPINVOKE.helicsTranslatorAddSourceEndpoint(SWIGTYPE_p_void.getCPtr(trans), ept);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsTranslatorAddDestinationEndpoint(SWIGTYPE_p_void trans, string ept) {
    helicsPINVOKE.helicsTranslatorAddDestinationEndpoint(SWIGTYPE_p_void.getCPtr(trans), ept);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsTranslatorRemoveTarget(SWIGTYPE_p_void trans, string target) {
    helicsPINVOKE.helicsTranslatorRemoveTarget(SWIGTYPE_p_void.getCPtr(trans), target);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static string helicsTranslatorGetInfo(SWIGTYPE_p_void trans) {
    string ret = helicsPINVOKE.helicsTranslatorGetInfo(SWIGTYPE_p_void.getCPtr(trans));
    return ret;
  }

  public static void helicsTranslatorSetInfo(SWIGTYPE_p_void trans, string info) {
    helicsPINVOKE.helicsTranslatorSetInfo(SWIGTYPE_p_void.getCPtr(trans), info);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static string helicsTranslatorGetTag(SWIGTYPE_p_void trans, string tagname) {
    string ret = helicsPINVOKE.helicsTranslatorGetTag(SWIGTYPE_p_void.getCPtr(trans), tagname);
    return ret;
  }

  public static void helicsTranslatorSetTag(SWIGTYPE_p_void trans, string tagname, string tagvalue) {
    helicsPINVOKE.helicsTranslatorSetTag(SWIGTYPE_p_void.getCPtr(trans), tagname, tagvalue);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsTranslatorSetOption(SWIGTYPE_p_void trans, int option, int value) {
    helicsPINVOKE.helicsTranslatorSetOption(SWIGTYPE_p_void.getCPtr(trans), option, value);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int helicsTranslatorGetOption(SWIGTYPE_p_void trans, int option) {
    int ret = helicsPINVOKE.helicsTranslatorGetOption(SWIGTYPE_p_void.getCPtr(trans), option);
    return ret;
  }

  public static void helicsFederateSetTimeRequestEntryCallback(SWIGTYPE_p_void fed, SWIGTYPE_p_f_double_double_int_p_void__void requestTime, SWIGTYPE_p_void userdata) {
    helicsPINVOKE.helicsFederateSetTimeRequestEntryCallback(SWIGTYPE_p_void.getCPtr(fed), SWIGTYPE_p_f_double_double_int_p_void__void.getCPtr(requestTime), SWIGTYPE_p_void.getCPtr(userdata));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederateSetTimeUpdateCallback(SWIGTYPE_p_void fed, SWIGTYPE_p_f_double_int_p_void__void timeUpdate, SWIGTYPE_p_void userdata) {
    helicsPINVOKE.helicsFederateSetTimeUpdateCallback(SWIGTYPE_p_void.getCPtr(fed), SWIGTYPE_p_f_double_int_p_void__void.getCPtr(timeUpdate), SWIGTYPE_p_void.getCPtr(userdata));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederateSetStateChangeCallback(SWIGTYPE_p_void fed, SWIGTYPE_p_f_enum_HelicsFederateState_enum_HelicsFederateState_p_void__void stateChange, SWIGTYPE_p_void userdata) {
    helicsPINVOKE.helicsFederateSetStateChangeCallback(SWIGTYPE_p_void.getCPtr(fed), SWIGTYPE_p_f_enum_HelicsFederateState_enum_HelicsFederateState_p_void__void.getCPtr(stateChange), SWIGTYPE_p_void.getCPtr(userdata));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederateSetTimeRequestReturnCallback(SWIGTYPE_p_void fed, SWIGTYPE_p_f_double_int_p_void__void requestTimeReturn, SWIGTYPE_p_void userdata) {
    helicsPINVOKE.helicsFederateSetTimeRequestReturnCallback(SWIGTYPE_p_void.getCPtr(fed), SWIGTYPE_p_f_double_int_p_void__void.getCPtr(requestTimeReturn), SWIGTYPE_p_void.getCPtr(userdata));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederateInitializingEntryCallback(SWIGTYPE_p_void fed, SWIGTYPE_p_f_int_p_void__void initializingEntry, SWIGTYPE_p_void userdata) {
    helicsPINVOKE.helicsFederateInitializingEntryCallback(SWIGTYPE_p_void.getCPtr(fed), SWIGTYPE_p_f_int_p_void__void.getCPtr(initializingEntry), SWIGTYPE_p_void.getCPtr(userdata));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederateExecutingEntryCallback(SWIGTYPE_p_void fed, SWIGTYPE_p_f_p_void__void executingEntry, SWIGTYPE_p_void userdata) {
    helicsPINVOKE.helicsFederateExecutingEntryCallback(SWIGTYPE_p_void.getCPtr(fed), SWIGTYPE_p_f_p_void__void.getCPtr(executingEntry), SWIGTYPE_p_void.getCPtr(userdata));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederateCosimulationTerminationCallback(SWIGTYPE_p_void fed, SWIGTYPE_p_f_p_void__void cosimTermination, SWIGTYPE_p_void userdata) {
    helicsPINVOKE.helicsFederateCosimulationTerminationCallback(SWIGTYPE_p_void.getCPtr(fed), SWIGTYPE_p_f_p_void__void.getCPtr(cosimTermination), SWIGTYPE_p_void.getCPtr(userdata));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederateErrorHandlerCallback(SWIGTYPE_p_void fed, SWIGTYPE_p_f_int_p_q_const__char_p_void__void errorHandler, SWIGTYPE_p_void userdata) {
    helicsPINVOKE.helicsFederateErrorHandlerCallback(SWIGTYPE_p_void.getCPtr(fed), SWIGTYPE_p_f_int_p_q_const__char_p_void__void.getCPtr(errorHandler), SWIGTYPE_p_void.getCPtr(userdata));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsCallbackFederateNextTimeCallback(SWIGTYPE_p_void fed, SWIGTYPE_p_f_double_p_void__double timeUpdate, SWIGTYPE_p_void userdata) {
    helicsPINVOKE.helicsCallbackFederateNextTimeCallback(SWIGTYPE_p_void.getCPtr(fed), SWIGTYPE_p_f_double_p_void__double.getCPtr(timeUpdate), SWIGTYPE_p_void.getCPtr(userdata));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsCallbackFederateNextTimeIterativeCallback(SWIGTYPE_p_void fed, SWIGTYPE_p_f_double_enum_HelicsIterationResult_p_enum_HelicsIterationRequest_p_void__double timeUpdate, SWIGTYPE_p_void userdata) {
    helicsPINVOKE.helicsCallbackFederateNextTimeIterativeCallback(SWIGTYPE_p_void.getCPtr(fed), SWIGTYPE_p_f_double_enum_HelicsIterationResult_p_enum_HelicsIterationRequest_p_void__double.getCPtr(timeUpdate), SWIGTYPE_p_void.getCPtr(userdata));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsCallbackFederateInitializeCallback(SWIGTYPE_p_void fed, SWIGTYPE_p_f_p_void__HelicsIterationRequest initialize, SWIGTYPE_p_void userdata) {
    helicsPINVOKE.helicsCallbackFederateInitializeCallback(SWIGTYPE_p_void.getCPtr(fed), SWIGTYPE_p_f_p_void__HelicsIterationRequest.getCPtr(initialize), SWIGTYPE_p_void.getCPtr(userdata));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static readonly double HELICS_BIG_NUMBER = helicsPINVOKE.HELICS_BIG_NUMBER_get();
}

public class SWIGTYPE_p_f_double_enum_HelicsIterationResult_p_enum_HelicsIterationRequest_p_void__double {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_f_double_enum_HelicsIterationResult_p_enum_HelicsIterationRequest_p_void__double(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_f_double_enum_HelicsIterationResult_p_enum_HelicsIterationRequest_p_void__double() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_f_double_enum_HelicsIterationResult_p_enum_HelicsIterationRequest_p_void__double obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_f_double_p_void__double {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_f_double_p_void__double(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_f_double_p_void__double() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_f_double_p_void__double obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_double {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_double(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_double() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_double obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_f_int_p_q_const__char_p_void__void {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_f_int_p_q_const__char_p_void__void(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_f_int_p_q_const__char_p_void__void() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_f_int_p_q_const__char_p_void__void obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_f_p_void__void {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_f_p_void__void(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_f_p_void__void() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_f_p_void__void obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_f_int_p_void__void {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_f_int_p_void__void(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_f_int_p_void__void() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_f_int_p_void__void obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_f_double_int_p_void__void {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_f_double_int_p_void__void(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_f_double_int_p_void__void() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_f_double_int_p_void__void obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_f_double_double_int_p_void__void {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_f_double_double_int_p_void__void(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_f_double_double_int_p_void__void() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_f_double_double_int_p_void__void obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_int32_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_int32_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_int32_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_int32_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_void {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_void(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_void() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_void obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_f_int__int {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_f_int__int(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_f_int__int() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_f_int__int obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_p_char {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_p_char(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_p_char() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_p_char obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_f_enum_HelicsFederateState_enum_HelicsFederateState_p_void__void {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_f_enum_HelicsFederateState_enum_HelicsFederateState_p_void__void(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_f_enum_HelicsFederateState_enum_HelicsFederateState_p_void__void() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_f_enum_HelicsFederateState_enum_HelicsFederateState_p_void__void obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_f_p_void__HelicsIterationRequest {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_f_p_void__HelicsIterationRequest(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_f_p_void__HelicsIterationRequest() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_f_p_void__HelicsIterationRequest obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}
